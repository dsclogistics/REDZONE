@model IEnumerable<REDZONE.Models.MPReason>

@{
    ViewBag.Title = "Reason Management";
}

<link href="~/Content/ReasonMgmt.css" rel="stylesheet" />

<style>
  th{
      text-align:center;
  }
    .sortableRow {
        background-color: #92c6cb !important;
    }
</style>
<h2>Reason Management</h2>

<div class="panel panel-default">

    <div class="panel-heading" style="padding:4px">
        <div class="row " style="margin:0; margin-bottom:0px;">
            <div class="col-sm-5" style="text-align:right; padding:0px 0px"><span class="form-control" style="font-weight:bold; max-width:190px; float:right; border-top-right-radius:0px; border-bottom-right-radius:0px; background-color: rgb(51,122,183); color:white; border-color:rgb(51,122,183)">Select a Metric Period: </span></div>
            <div class="col-sm-5" style="text-align: left; padding-left: 0px">@Html.DropDownList("metric_period_sel_list", null, "--- Select Metric Period ---", htmlAttributes: new { @class = "form-control", style = "min-width:200px; max-width:350px; border-bottom-left-radius:0px; border-top-left-radius:0px;" })</div>
        </div>
    </div>

    <div class="panel-body ">

        @if (ViewBag.id != 0)
        {
            <input type="hidden" id="MtrcPeriodId" value=@ViewBag.id />
            if (Model.Count() > 0)
            {
                //Reason LIST
                <div class="row" id="divReasonList" style="border:0px double black; margin: 0px 0px">
                    @*<div class="row" style="border-bottom: 1px solid black; margin:0; text-align: center; padding:2px; font-size:large">
                        <span>Available Reasons for Metric Period "</span><span id="mpName"></span><span>"</span>
                        <h3><span style="font-weight:normal">'</span></h3>
                    </div>*@
                    <div class="row" id="divReasonListView" style="margin:0; margin-bottom:10px">
                        <div class="row" style="margin:0 auto; ">
                        @*<div class="row" style="margin:0 auto; min-height:400px; max-height:400px; overflow-y:scroll; overflow-x:hidden; ">*@

                            <table class="table table-bordered table-condensed table-hover table-striped" id="sortTable">
                                <thead>
                                    <tr style="background-color: rgb(51,122,183); color:white">
                                        @*<th>
                                            @Html.DisplayNameFor(model => model.reason_id)
                                        </th>*@
                                        <th>
                                            @Html.DisplayNameFor(model => model.reason_text)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.reason_order)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.reason_description)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.reason_std_yn)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.times_used)
                                        </th>
                                        <th>

                                        </th>
                                    </tr>
                                </thead>

                                <tbody>
                                    @foreach (REDZONE.Models.MPReason item in Model)
                                    {
                                        if(item.reason_std_yn == "Y")
                                        {
                                            ViewBag.reasonRowClass = "stdReasonRow";
                                        }
                                        else
                                        {
                                            ViewBag.reasonRowClass = "nonstdReasonRow";
                                        }
                                        <tr class="reasonListRow @ViewBag.reasonRowClass">

                                            <td style="display:none">
                                                <span id="reason_id">@Html.DisplayFor(modelItem => item.reason_id)</span>
                                            </td>
                                            <td style="display:none">
                                                <span id="metric_period_id">@Html.DisplayFor(modelItem => item.metric_period_id)</span>
                                            </td>
                                            <td style="display:none">
                                                <span id="reason_created_on_dtm">@Html.DisplayFor(modelItem => item.reason_created_on_dtm)</span>
                                            </td>
                                            <td style="display:none">
                                                <span id="reason_created_by_uid">@Html.DisplayFor(modelItem => item.reason_created_by_uid)</span>
                                            </td>
                                            <td style="display:none">
                                                <span id="reason_stdized_on_dtm">@Html.DisplayFor(modelItem => item.reason_stdized_on_dtm)</span>
                                            </td>
                                            <td style="display:none">
                                                <span id="reason_stdized_by_uid">@Html.DisplayFor(modelItem => item.reason_stdized_by_uid)</span>
                                            </td>

                                            <td class="firstCol">
                                                <span class="sortIcon glyphicon glyphicon-sort" style="float:left; display:none"></span>
                                                <span class="reason-list-display-field" id="reason_text">@Html.DisplayFor(modelItem => item.reason_text)</span>
                                                @Html.TextBoxFor(modelItem => item.reason_text, new { @class = "reason-list-edit-field created-by-admin", style = "display:none" })
                                            </td>
                                            <td>
                                                <span id="reason_order">@Html.DisplayFor(modelItem => item.reason_order)</span>
                                                <span id="prev_reason_order" style="display:none">@Html.DisplayFor(modelItem => item.reason_order)</span>
                                            </td>
                                            <td>
                                                <span class="reason-list-display-field" id="reason_description">@Html.DisplayFor(modelItem => item.reason_description)</span>
                                                @Html.TextBoxFor(modelItem => item.reason_description, new { @class = "reason-list-edit-field", style = "display:none" })
                                            </td>
                                            <td class="std-checkbox" align="center">
                                                @Html.HiddenFor(modelItem => item.reason_std_yn, new { @class = "reason-list-edit-field" })
                                                <label class="switch">
                                                    <input class="switch-input" type="checkbox" @if (item.reason_std_yn == "Y") { <text>checked</text> } disabled/>
                                                    <span class="switch-label" data-on="Y" data-off="N"></span>
                                                    <span class="switch-handle"></span>
                                                </label>
                                            </td>
                                            <td>
                                                <span id="times_used">@Html.DisplayFor(modelItem => item.times_used)</span>
                                            </td>

                                            <td class="lastCol">
                                                @*<input type="button" class="btnReasonDetails" value="Details" />*@
                                                <input type="button" class="btnReasonEdit" value="Edit" />
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            <div style="text-align:left;">
                                <span id="reasonListValMsg" style="color:red; text-align:left;"></span>
                            </div>
                        </div>
                        <hr />
                        <div class="row" style="text-align:left; margin-left: 5px">
                            <div class="col-sm-6" id="btnsReorder" style="float:left">
                                <button type="button" class="btn btn-primary" id="btnAddReason">Add New Reason</button>
                                <button type="button" class="btn btn-primary" id="btnReorderReasons" style="margin-left:15px">Reorder</button>
                            </div>
                            <div class="col-sm-6" id="btnsEdit" style="float:left; display:none">
                                <button type="button" class="btn btn-primary" id="btnReasonListSave">Save Reason</button>
                                <button type="button" class="btn btn-primary" id="btnReasonListRemove" style="margin-left:15px">Remove Reason</button>
                                <button type="button" class="btn btn-warning" id="btnReasonListCancel" style="margin-left:15px">Cancel</button>
                            </div>
                            <div class="col-sm-6" id="btnsReordering" style="float:right; display:none">
                                <button type="button" class="btn btn-primary" id="btnReorderSave">Save Order Sequence</button>
                                <button type="button" class="btn btn-warning" id="btnReorderCancel" style="margin-left:15px">Cancel Reorder</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="row" id="divReasonList" style="border:4px double black; margin: 20px 0px; padding:30px; border-radius:7px">
                    <span style="color:red; font-weight:bold;">NO REASONS HAVE BEEN DEFINED FOR THE SELECTED METRIC PERIOD  </span>
                    <hr />
                    <div class="row" style="text-align:left; margin-left: 5px">
                        <div class="col-sm-6" id="btnsReorder" style="float:left">
                            <button type="button" class="btn btn-primary" id="btnAddReason">Add New Reason</button>
                        </div>
                    </div>
                </div>
            }
        }

        else
        {
            <div class="row" id="divReasonList" style="border:4px double black; margin: 20px 0px; padding:30px; border-radius:7px">
                <span style="color:blue; font-weight:bold;">SELECT A VALUE FROM THE DROPDOWN</span>
            </div>
        }
    </div>

</div>


<!-- Editor Modal -->
<div id="reasonEditForm" class="modal fade" role="dialog">
    <div class="modal-dialog" style="width:80%">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title reason-detail">Reason Details</h4>
                <h4 class="modal-title add-reason">Add New Reason</h4>
            </div>
            <div class="modal-body" id="reasonEditBody">

            </div>
            <div class="modal-footer" id="reasonEditFooter">
                @*<input type="button" disabled class="btn btn-primary add-reason-hide" id="btnEditReasonDetail" value="Edit" />*@
                @*<input type="button" disabled class="btn btn-primary add-reason-hide" id="btnSaveReasonDetail" value="Save" />*@
                <input type="button" disabled class="btn btn-primary" style="display:none" id="btnAddReasonDetail" value="Add" />
                @*<input type="button" disabled class="btn btn-primary add-reason-hide" id="btnRemoveReason" value="Remove" />*@
               <button type="button" class="btn btn-warning" id="btnCancelReasonEdit" data-dismiss="modal">Cancel</button>
            </div>
        </div>

    </div>
</div>


<script>
    $(document).ready(function () {
        $("#mpName").html($("#metric_period_sel_list option:selected").text());
        //Metric Period Dropdown
        //------------------------------------------------------------------------
        $("#metric_period_sel_list").on("change", function () {
            var selId = $(this).val();
            location.href = "/ReasonMgmt/Index/" + selId;
        });


        //On Reason List details button click
        //------------------------------------------------------------------------
        $("#divReasonList").on('click', '.btnReasonDetails', function () {

            var tempScrollTop = $(window).scrollTop();

            //Get data for MPReason model from specified row.
            var reason_id = $(this).parent().siblings().find("#reason_id").text();
            var metric_period_id = $(this).parent().siblings().find("#metric_period_id").text();
            var reason_text = $(this).parent().siblings().find("#reason_text").text();
            var reason_order = $(this).parent().siblings().find("#reason_order").text();
            var reason_description = $(this).parent().siblings().find("#reason_description").text();
            var reason_std_yn = $(this).parent().siblings().find("#reason_std_yn").text();
            var reason_created_on_dtm = $(this).parent().siblings().find("#reason_created_on_dtm").text();
            var reason_created_by_uid = $(this).parent().siblings().find("#reason_created_by_uid").text();
            var reason_stdized_on_dtm = $(this).parent().siblings().find("#reason_stdized_on_dtm").text();
            var reason_stdized_by_uid = $(this).parent().siblings().find("#reason_stdized_by_uid").text();
            var times_used = $(this).parent().siblings().find("#times_used").text();

            // Put data into a single object.
            var formData = {
                reason_id: reason_id,
                metric_period_id: metric_period_id,
                reason_text: reason_text,
                reason_order: reason_order,
                reason_description: reason_description,
                reason_std_yn: reason_std_yn,
                reason_created_on_dtm: reason_created_on_dtm,
                reason_created_by_uid: reason_created_by_uid,
                reason_stdized_on_dtm: reason_stdized_on_dtm,
                reason_stdized_by_uid: reason_stdized_by_uid,
                times_used: times_used
            };

            // Make the Ajax Call to Return _ReasonDetail Partial View
            $.ajax({
                type: 'POST', // define the type of HTTP verb we want to use (POST for our form)
                //method    : 'POST',
                @*url     : '@Url.Action("_metricPeriodDetails", "MetricPeriod")',*@
                url: '/ReasonMgmt/_RsnDetail', // the url where we want to POST
                //data    : { id: idToDisplay },     //<---- Data Parameters (if not already passed in the Url)
                data: formData, // our data object created earlier
                //dataType  : 'json', // what type of data do we expect back from the server (Remove line if expecting html [partial or full]view result)
                //encode    : true,
                cache: false,
                //--- On error, execute this function ------
                error: function (xhr, status, error) {
                    //var err = eval("(" + xhr.responseText + ")");
                    $("#reasonEditBody").html(xhr.responseText);
                    //$("#msgLoading").hide();
                    //alert("An Error has Occurred.");  //<-- Trap and alert of any errors if they occurred
                }
            }).done(function (d) {
                //This code Executes After the Ajax call completes successfully
                //Insert the partial view retrieved into the output 'ReasonDetailsView' panel
                $("#reasonEditBody").html(d);
                $("#btnReasonDetails").prop("disabled", false);
                $(".editable-rsn-attr").prop("disabled", true);
                $(".add-reason").hide();
                $(".reason-detail").show();
                $(".add-reason-hide").show();

                //Sets the asterisks
                if (reason_text == "") {
                    $("#reasonEditBody").find('#reason_text').siblings('.input-group-addon').addClass('asterisk');
                }
                else {
                    $("#reasonEditBody").find('#reason_text').siblings('.input-group-addon').removeClass('asterisk');
                }

                if (reason_std_yn.toLowerCase() == "n" || reason_std_yn.toLowerCase() == "y") {
                    $("#reasonEditBody").find('#reason_std_yn').siblings('.input-group-addon').removeClass('asterisk');
                }
                else {
                    $("#reasonEditBody").find('#reason_std_yn').siblings('.input-group-addon').addClass('asterisk');
                }

                //Sets detail buttons
                $("#validationMessage").hide();
                $("#btnSaveReasonDetail").show();
                $("#btnAddReasonDetail").hide();
                $("#btnEditReasonDetail").prop("disabled", false);
                $("#btnSaveReasonDetail").prop("disabled", true);
                $("#btnRemoveReason").prop("disabled", true);
                $("#btnCancelReasonEdit").prop("disabled", false);

                $(window).scrollTop(tempScrollTop);

                $('#reasonEditForm').modal('show');
            });
        });


        //On Reason List edit button click
        //------------------------------------------------------------------------
        $("#divReasonList").on('click', '.btnReasonEdit', function () {
            //Switch out display fields with input fields for certain columns
            $('.btnReasonEdit').prop("disabled", true);
            $(this).parent().siblings().find('.reason-list-display-field').hide();
            $(this).parent().siblings().find('.reason-list-edit-field').show();
            $(this).parent().siblings().find('.switch-input').prop("disabled", false);

            //If times used by metrics > 0, then don't allow removal.
            if (parseFloat($(this).parent().siblings().find('#times_used').text()) > 0) {
                $('#btnReasonListRemove').prop("disabled", true);
            }

            //Disable ability to edit reason text if reason created bya dmin
            //alert($(this).parent().siblings().find("#reason_created_by_uid").text())
            disableReasonTextIfAdmin($(this).parent().siblings().find("#reason_created_by_uid").text());

            //Hide normal buttons
            $('#btnsReorder').hide();

            //Show save, remove, cancel buttons
            $('#btnsEdit').show();

            //Toggle edit class
            $(this).addClass('currently-being-edited');
        });

        //Reason List Save button
        //------------------------------------------------------------------------
        $('#btnsEdit').on('click', '#btnReasonListSave', function () {
            var validated = validateReasonRow();
            if (validated) updateMPReason();
        });

        //Reason List Remove button
        //------------------------------------------------------------------------
        $('#btnsEdit').on('click', '#btnReasonListRemove', function () {
            var validated = validateReasonListDelete();
            if (validated) removeMPReason();
        });

        //Reason List Cancel button
        //------------------------------------------------------------------------
        $('#btnsEdit').on('click', '#btnReasonListCancel', function () {
            location.reload();
        });



        //Add New Reason button -> Add Reason Popup
        //------------------------------------------------------------------------
        $("#divReasonList").on('click', '#btnAddReason', function () {
            popupAddMPReason();
        });

        //Reorder Button -> Reorder Mode
        //------------------------------------------------------------------------
        $("#divReasonList").on('click', '#btnReorderReasons', function () {
            //Enable the Table row sortability function
            reasonSortEnable();
            $('.sortIcon').show();
            $('#btnsReorder').hide();
            $('#btnsReordering').show();
            $('.reasonListRow').addClass('sortableRow');
            $('.firstCol').css("border-top-left-radius", "4px");
            $('.firstCol').css("border-bottom-left-radius", "4px");
            $('.lastCol').css("border-top-right-radius", "4px");
            $('.lastCol').css("border-bottom-right-radius", "4px");

            $('.nonstdReasonRow').hide();
            //$('.btnReasonDetails').prop("disabled", true);
            $('.btnReasonEdit').prop("disabled", true);
        });

        //Reorder Save Button
        //------------------------------------------------------------------------
        $("#divReasonList").on('click', '#btnReorderSave', function () {
            //alert("Saving functionality is not enabled yet");
            // Call Ajax to Save the New Reason Row Order. After Save we can just reload the page so it picks up the new DB order
            //alert(buildReorderMPReasonJSON());
            reorderMPReasons();
            location.reload();
            //$('#btnsReordering').hide();
            //$('#btnsReorder').show();
            //$('.sortIcon').hide();
            //reasonSortDisable();
            //$('.nonstdReasonRow').show();
        });

        //Reorder Cancel Button
        //------------------------------------------------------------------------
        $("#divReasonList").on('click', '#btnReorderCancel', function () {
            location.reload();
            //$('.sortIcon').hide();
            //$('#btnsReordering').hide();
            //$('#btnsReorder').show();
            //reasonSortDisable();
        });


        //Editor Edit Button
        //------------------------------------------------------------------------
        $("#reasonEditFooter").on('click', '#btnEditReasonDetail', function () {

            $(".editable-rsn-attr").prop("disabled", false);

            disableReasonTextIfAdmin($(this).parent().siblings("#reasonEditBody").find("#reason_created_by_uid").val());

            //Sets detail buttons
            $("#btnSaveReasonDetail").show();
            $("#btnAddReasonDetail").hide();
            $("#btnEditReasonDetail").prop("disabled", true);
            $("#btnSaveReasonDetail").prop("disabled", true);
            var metricValueUsedOn = $("#timesUsed").val();
            if (metricValueUsedOn == 0) {
                $("#btnRemoveReason").prop("disabled", false);
            }
            else {
                $("#btnRemoveReason").prop("disabled", true);
            }
            $("#btnCancelReasonEdit").prop("disabled", false);
        });

        //Editor Add Button
        //------------------------------------------------------------------------
        $("#reasonEditFooter").on('click', '#btnAddReasonDetail', function () {
            //alert(buildAddMPReasonJSON());
            var validated = validateReasonForm();
            if (validated) addMPReason();
        });

        //Editor Save Button
        //------------------------------------------------------------------------
        $("#reasonEditFooter").on('click', '#btnSaveReasonDetail', function () {
            //alert(buildUpdateMPReasonJSON());
            var validated = validateReasonForm();
            if (validated) updateMPReason();
        });

        //Editor Remove Button
        //------------------------------------------------------------------------
        $("#reasonEditFooter").on('click', '#btnRemoveReason', function () {
            var validated = validateReasonDelete();
            if (validated) removeMPReason();
        });

        //Editor inline changes and validation
        //------------------------------------------------------------------------
        $(document).on('change', '.editable-rsn-attr', function () {
            $(this).css("background-color", "transparent");
            $("#btnSaveReasonDetail").prop("disabled", false);
        });

        $(document).on('keyup', '.required', function () {
            var val = $(this).val();
            //alert(val);

            if (val == "") {
                $(this).siblings('.input-group-addon').addClass('asterisk');
            }
            else {
                $(this).siblings('.input-group-addon').removeClass('asterisk');
            }

            if($('.input-group-addon').hasClass('asterisk')){
                $('#validationMessage').show();
            }
            else{
                $('#validationMessage').hide();
            }
        });

        $(document).on('keyup', '.y-n-required', function () {
            this.value = this.value.toUpperCase();

            var val = $(this).val();
            //alert(val);

            if (val == "Y" || val == "N") {
                $(this).siblings('.input-group-addon').removeClass('asterisk');
            }
            else {
                $(this).siblings('.input-group-addon').addClass('asterisk');
            }

            if ($('.input-group-addon').hasClass('asterisk')) {
                $('#validationMessage').show();
            }
            else {
                $('#validationMessage').hide();
            }
        });

        $(document).on('keypress', '.y-n-required', function () {
            var val = $(this).val();
            //alert(val.length);

            if (val.length > 0) {
                this.value = this.value.substring(0, 0);
            }
        });

        //Sets hidden value of reason_std_yn field to what the switch specifies.
        $('.switch-input').change(function () {
            if ($(this).prop("checked")) {
                $(this).parents(".std-checkbox").first().find("#item_reason_std_yn").first().val("Y");
            }
            else {
                $(this).parents(".std-checkbox").first().find("#item_reason_std_yn").first().val("N");
            }
        });

        $('#reasonEditBody').on('click', '.switch-input', function () {
            if ($(this).prop("checked")) {
                $(this).parents(".popup-std-checkbox").first().find("#reason_std_yn").first().val("Y");
            }
            else {
                $(this).parents(".popup-std-checkbox").first().find("#reason_std_yn").first().val("N");
            }
        });
    });


    //------------------------------------------------------------------------------------------------
    //-------------------------------------------FUNCTIONS--------------------------------------------
    //------------------------------------------------------------------------------------------------
    //Add Metric Period Reason functions
    //------------------------------------------------------------------------------------------------
    function popupAddMPReason() {
        var tempScrollTop = $(window).scrollTop();

        //Get data for MPReason model from specified row.
        var metric_period_id = $(MtrcPeriodId).val();

        // Put data into a single object.
        var formData = {
            metric_period_id: metric_period_id,
            reason_std_yn: "N"
        };

        // Make the Ajax Call to Return _ReasonDetail Partial View with blank model
        $.ajax({
            type: 'POST', // define the type of HTTP verb we want to use (POST for our form)
            //method    : 'POST',
            @*url     : '@Url.Action("_metricPeriodDetails", "MetricPeriod")',*@
            url: '/ReasonMgmt/_RsnDetail', // the url where we want to POST
            //data    : { id: idToDisplay },     //<---- Data Parameters (if not already passed in the Url)
            data: formData, // our data object created earlier
            //dataType  : 'json', // what type of data do we expect back from the server (Remove line if expecting html [partial or full]view result)
            //encode    : true,
            cache: false,
            //--- On error, execute this function ------
            error: function (xhr, status, error) {
                //var err = eval("(" + xhr.responseText + ")");
                $("#reasonEditBody").html(xhr.responseText);
                //$("#msgLoading").hide();
                //alert("An Error has Occurred.");  //<-- Trap and alert of any errors if they occurred
            }
        }).done(function (d) {
            //This code Executes After the Ajax call completes successfully
            //Insert the partial view retrieved into the output 'ReasonDetailsView' panel
            $("#reasonEditBody").html(d);
            //$("#msgLoading").hide();
            $(".editable-rsn-attr").prop("disabled", false);
            $(".add-reason").show();
            $(".reason-detail").hide();
            $(".add-reason-hide").hide();

            //Sets detail buttons
            $("#btnAddReasonDetail").show();
            $("#btnSaveReasonDetail").hide();
            $("#btnAddReasonDetail").prop("disabled", false);
            $("#btnEditReasonDetail").prop("disabled", true);
            $("#btnRemoveReason").prop("disabled", true);
            $("#btnCancelReasonEdit").prop("disabled", false);

            $(window).scrollTop(tempScrollTop);

            $('#reasonEditForm').modal('show');
        });
    }

    function buildAddMPReasonJSON() {

        var metric_period_id = $("#reasonEditBody").find("#hdnMetricPeriodId").val();
        var reason_text = $("#reasonEditBody").find("#reason_text").val();
        var reason_description = $("#reasonEditBody").find("#reason_description").val();
        var reason_std_yn = $("#reasonEditBody").find("#reason_std_yn").val().toString();
        var reason_order = (reason_std_yn != "Y") ? "" : getNextOrder();

        //var reason_order = 4;
        var user_id = "@User.Identity.Name";

        var jsonPayload = '{"reasons":[{"mtrc_period_id":"' + metric_period_id + '","mpr_display_text":"' + reason_text + '","mpr_desc":"' + reason_description + '","mpr_std_yn":"' + reason_std_yn + '","mpr_display_order":"' + reason_order + '","user_id":"'+user_id+'"}]}';

        //alert("Json submitted:\n" + jsonPayloadDetail);
        return jsonPayload
    }

    function addMPReason() {
        var payload = buildAddMPReasonJSON();
        //alert(payload);

        $.ajax({
            url: '/ReasonMgmt/saveMPReason',
            //url: 'http://dscapidev/dscmtrc/api/v1/metric/savereason',
            method: "POST",
            cache: false,
            //type: "POST",
            //data: payload,
            data: { raw_json: payload },
            //contentType: "application/json; charset=utf-8",
            //dataType: "json",
            error: function (jqXHR, textStatus, errorThrown) {
                alert("Failed to Save Data. Ajax Failed!!\nError:" + textStatus + "," + errorThrown);  //<-- Trap and alert of any errors if they occurred
            }
        }).done(function (d) {
            if (d == "Success") {
                alert("Reason Added!");
                location.reload();
            } else {
                alert("Error Saving the data!\n" + JSON.stringify(d));
            }
        });
    }

    //Update Metric Period Reason functions
    //------------------------------------------------------------------------------------------------
    @*function buildUpdateMPReasonJSON() {

        var reason_id = $("#reasonEditBody").find("#reason_id").val();
        var metric_period_id = $("#reasonEditBody").find("#hdnMetricPeriodId").val();
        var reason_text = $("#reasonEditBody").find("#reason_text").val();
        var reason_description = $("#reasonEditBody").find("#reason_description").val();
        var reason_std_yn = $("#reasonEditBody").find("#reason_std_yn").val().toString();
        //var reason_order
        if (reason_std_yn != "Y") {
            reason_order = "";
        }
        else {
            var temp_reason_order = $("#reasonEditBody").find("#reason_order").val();
            if (temp_reason_order == "") {
                reason_order = getNextOrder();
            }
            else {
                reason_order = temp_reason_order;
            }
        }
        var user_id = "@User.Identity.Name";

        var jsonPayload = '{"mpr_id":"' + reason_id + '","mtrc_period_id":"' + metric_period_id + '","mpr_display_text":"' + reason_text + '","mpr_desc":"' + reason_description + '","mpr_std_yn":"' + reason_std_yn + '","mpr_display_order":"' + reason_order + '","user_id":"' + user_id + '"}';

        //alert("Json submitted:\n" + jsonPayloadDetail);
        return jsonPayload
    }*@

    function buildUpdateMPReasonListJSON() {
        var reason_id = $('.currently-being-edited').parent().siblings().find("#reason_id").text();
        var metric_period_id = $('.currently-being-edited').parent().siblings().find("#metric_period_id").text();
        var reason_text = $('.currently-being-edited').parent().siblings().find("#item_reason_text").val();
        var reason_description = $('.currently-being-edited').parent().siblings().find("#item_reason_description").val();
        var reason_std_yn = $('.currently-being-edited').parent().siblings().find("#item_reason_std_yn").val();
        //var reason_order
        if (reason_std_yn != "Y") {
            reason_order = "";
        }
        else {
            var temp_reason_order = $('.currently-being-edited').parent().siblings().find("#reason_order").text();
            if (temp_reason_order == "") {
                reason_order = getNextOrder();
            }
            else {
                reason_order = parseFloat(temp_reason_order);
            }
        }
        var user_id = "@User.Identity.Name";

        var jsonPayload = '{"mpr_id":"' + reason_id + '","mtrc_period_id":"' + metric_period_id + '","mpr_display_text":"' + reason_text + '","mpr_desc":"' + reason_description + '","mpr_std_yn":"' + reason_std_yn + '","mpr_display_order":"' + reason_order + '","user_id":"' + user_id + '"}';

        //alert("Json submitted:\n" + jsonPayload);
        return jsonPayload
    }

    function updateMPReason() {
        //var payload = buildUpdateMPReasonJSON();
        payload = buildUpdateMPReasonListJSON();
        //alert(payload);

        $.ajax({
            url: '/ReasonMgmt/updateMPReason',
            //url: 'http://dscapidev/dscmtrc/api/v1/metric/updatereason',
            method: "POST",
            cache: false,
            //type: "POST",
            //data: payload,
            data: { raw_json: payload },
            //contentType: "application/json; charset=utf-8",
            //dataType: "json",
            error: function (jqXHR, textStatus, errorThrown) {
                alert("Failed to Save Data. Ajax Failed!!\nError:" + textStatus + "," + errorThrown);  //<-- Trap and alert of any errors if they occurred
            }
        }).done(function (d) {
            if (d == "Success") {
                alert("Reason Updated!");
                location.reload();
            } else {
                alert("Error Saving the data!\n" + JSON.stringify(d));
            }
        });
    }

    function disableReasonTextIfAdmin(user_id) {
        $.ajax({
            url: '/ReasonMgmt/isReasonCreatorAdmin',
            //url: '',
            method: "POST",
            cache: false,
            //type: "POST",
            //data: payload,
            data: { "user_id": user_id },
            //contentType: "application/json; charset=utf-8",
            //dataType: "json",
            error: function (jqXHR, textStatus, errorThrown) {
                alert("Failed to Save Data. Ajax Failed!!\nError:" + textStatus + "," + errorThrown);  //<-- Trap and alert of any errors if they occurred
            alert('in ajax');
            }
        }).done(function (d) {
            if (d == "true") {
                $(".created-by-admin").prop("disabled", true);
            } else {
                alert("Error!\nOutput: " + JSON.stringify(d));
            }
        });
    }

    //Remove Metric Period Reason functions
    //------------------------------------------------------------------------------------------------
    function removeMPReason() {
        var reason_id = $('.currently-being-edited').parent().siblings().find("#reason_id").text();
        //var reason_id = $("#reasonEditBody").find("#reason_id").val();
        //alert(reason_id);

        var confirmed = confirm("Are you sure you want to remove this reason permanently?");

        if (confirmed) {
            $.ajax({
                url: '/ReasonMgmt/removeMPReason',
                //url: 'http://dscapidev/dscmtrc/api/v1/metric/removereason',
                method: "POST",
                cache: false,
                //type: "POST",
                //data: payload,
                data: { "mpr_id": reason_id },
                //contentType: "application/json; charset=utf-8",
                //dataType: "json",
                error: function (jqXHR, textStatus, errorThrown) {
                    alert("Failed to Save Data. Ajax Failed!!\nError:" + textStatus + "," + errorThrown);  //<-- Trap and alert of any errors if they occurred
                }
            }).done(function (d) {
                if (d == "Success") {
                    alert("Reason Removed!");
                    location.reload();
                } else {
                    alert("Error Saving the data!\n" + JSON.stringify(d));
                }
            });
        }
    }

    //Reorder Metric Period Reason functions
    //------------------------------------------------------------------------------------------------
    function buildReorderMPReasonJSON() {
        var metric_period_id = $("#MtrcPeriodId").val();

        var jsonPayload = '{"mtrc_period_id":"'+metric_period_id+'","reasons":['

        $('.stdReasonRow').each(function () {
            jsonPayload = (jsonPayload != '{"mtrc_period_id":"' + metric_period_id + '","reasons":[') ? jsonPayload + ',' : jsonPayload;

            var reason_id = parseInt($(this).find("#reason_id").text());
            var reason_order = parseInt($(this).find("#reason_order").text());
            var user_id = "@User.Identity.Name";

            jsonPayload = jsonPayload + '{"mpr_id":"' + reason_id + '","mpr_display_order":"' + reason_order + '","user_id":"' + user_id + '"}';
            
        });

        jsonPayload = jsonPayload + ']}'

        //alert("Json submitted:\n" + jsonPayloadDetail);
        return jsonPayload
    }

    function reorderMPReasons() {
        var payload = buildReorderMPReasonJSON();
        //alert(payload);

        $.ajax({
            url: '/ReasonMgmt/reorderMPReasons',
            //url: 'http://dscapidev/dscmtrc/api/v1/metric/reorderreasons',
            method: "POST",
            cache: false,
            //type: "POST",
            //data: payload,
            data: { raw_json: payload },
            //contentType: "application/json; charset=utf-8",
            //dataType: "json",
            error: function (jqXHR, textStatus, errorThrown) {
                alert("Failed to Save Data. Ajax Failed!!\nError:" + textStatus + "," + errorThrown);  //<-- Trap and alert of any errors if they occurred
            }
        }).done(function (d) {
            if (d == "Success") {
                alert("Reason Reordered!");
                location.reload();
            } else {
                alert("Error Saving the data!\n" + JSON.stringify(d));
            }
        });
    }


    //Validation
    //------------------------------------------------------------------------------------------------
    function validateReasonForm() {
        //Makes sure editable reason inputs follow the required rules before going to the controller.
        var passValidation = true;
        var alertString = "*";

        $(".editable-rsn-attr").each(function () {
            var thisVal = $(this).val();

            //alert("Element id is: " + $(this).prop("id"));

            switch ($(this).prop("id")) {
                case "reason_text":
                    if (thisVal == "") {
                        alertString = alertString + 'Reason text is required.\n';
                        passValidation = false;
                        //$(this).css("background-color", "red");
                    }
                    else if (thisVal.length > 100) {
                        alertString = alertString + 'Reason text must be less than 100 characters.\n';
                        passValidation = false;
                    }
                    break;

                case "reason_description":
                    if (thisVal.length > 150) {
                        alertString = alertString + 'Reason description must be less than 150 characters.\n';
                        passValidation = false;
                    }
                    break;

                case "reason_std_yn":
                    thisVal = thisVal.toUpperCase();

                    if (thisVal != "Y" && thisVal != "N") {
                        alertString = alertString + 'Standardized (Y/N) must be Y or N.\n';
                        passValidation = false;
                        //$(this).css("background-color", "red");
                    }
                    else {
                        $(this).val(thisVal);
                    }

                    break;

                default:
                    break;
            }
        });

        if (alertString != "*") $("#validationMessage").text(alertString);
        if (passValidation == false) $("#validationMessage").show();
        
        return passValidation;
    }

    function validateReasonRow() {
        //Makes sure editable reason inputs follow the required rules before going to the controller.
        var passValidation = true;
        var alertString = "*";

        $('.currently-being-edited').parent().siblings().find('.reason-list-edit-field').each(function (){
        //$(".reason-list-edit-field").each(function () {
            var thisVal = $(this).val();

            //alert("Element id is: " + $(this).prop("id"));

            switch ($(this).prop("id")) {
                case "item_reason_text":
                    if (thisVal == "") {
                        alertString = alertString + 'Reason text is required.\n';
                        passValidation = false;
                        //$(this).css("background-color", "red");
                    }
                    else if (thisVal.length > 100) {
                        alertString = alertString + 'Reason text must be less than 100 characters.\n';
                        passValidation = false;
                    }
                    break;

                case "item_reason_description":
                    if (thisVal.length > 150) {
                        alertString = alertString + 'Reason description must be less than 150 characters.\n';
                        passValidation = false;
                    }
                    break;

                case "item_reason_std_yn":
                    thisVal = thisVal.toUpperCase();

                    if (thisVal != "Y" && thisVal != "N") {
                        alertString = alertString + 'Standardized (Y/N) must be Y or N.\n';
                        passValidation = false;
                        //$(this).css("background-color", "red");
                    }
                    else {
                        $(this).val(thisVal);
                    }

                    break;

                default:
                    break;
            }
        });

        if (alertString != "*") $("#reasonListValMsg").text(alertString);
        if (passValidation == false) $("#reasonListValMsg").show();

        return passValidation;
    }

    //function validateReasonDelete() {
    //    //Makes sure a reason being removed has "times_used" = 0.
    //    var passValidation = true;
    //    var alertString = "";

    //    var thisVal = $("#times_used").val();

    //    if (thisVal != 0) {
    //        alertString = alertString + 'This reason is being used and cannot be removed.';
    //        passValidation = false;
    //    }

    //    if (alertString != "") alert(alertString);
    //    return passValidation;
    //}

    function validateReasonListDelete() {
        //Makes sure a reason being removed has "times_used" = 0.
        var passValidation = true;
        var alertString = "";

        var thisVal = $('.currently-being-edited').parent().siblings().find('#times_used').text();
        //alert(thisVal);
        //var thisVal = $("#times_used").val();

        if (thisVal != 0) {
            alertString = alertString + 'This reason is being used and cannot be removed.';
            passValidation = false;
        }

        if (alertString != "") alert(alertString);
        return passValidation;
    }
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/ReasonMgmt_Index.js"></script>
}