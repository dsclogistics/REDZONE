@model REDZONE.Models.RZ_Metric
@{ ViewBag.Title = "Model Metric";
 string titleClass = "alert-standard";
 if (Model.metricName.Equals("Requested Metric Period invalid or does not Exist")) { titleClass = "alert-danger"; };
 
 var curMonth = @Model.displayPeriodName.Substring(0, @Model.displayPeriodName.IndexOf(" "));
 var curYear = @Model.displayPeriodName.Substring(@Model.displayPeriodName.IndexOf(" ") + 1);
 string tblCaption = "";

 if (Model.metricPeriodStatus != null && Model.metricPeriodStatus.ToUpper().Equals("CLOSED")) tblCaption = "Warning, the current metric period has been closed and it cannot longer be modified.";
 if (Model.isAuto) tblCaption = "Warning, the values for this metric are generated automatically. They cannot be modified.";
}

<link href="~/Content/RedZoneApp.css" rel="stylesheet" />

<style>
    .buildingRow:hover {
        background-color: #f1f1f1;
    }
    .headerRow {
       padding: 4px; 
       font-weight:bold;
       width:98%;
    }
    .buildingRow {
        padding: 3px;
        border-bottom: 1px solid #f1f1f1;
        width:98%;
    }
    .buildingCol {
        border-right: 1px dashed #f1f1f1;   /*#f1f1f1*/
        text-align:center;
    }
</style>
@*<style>
    th {
        background-color: aliceblue;
    }

    td.center {
        text-align: center;
    }

    .alert-standard {
        background-color: #f1f0f0;
    }

    /*.modal-content {
        width: 80% !important;
        margin: 30px auto !important;
    }*/
    .error {        
        border: 1px solid red;
        background: #FFCECE;
    }
    .no-error {
        border: 1px solid black;
        background-color : white;
    }
    .ROField {
        border:none;
    }
</style>*@
<link href="~/Content/bootstrap-dialog.css" rel="stylesheet" />


@*<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap3-dialog/1.34.7/js/bootstrap-dialog.min.js"></script>
    or 
  <script src="~/Scripts/bootstrap-dialog.js"></script>

    <script src="~/Scripts/RZglobal.js"></script>*@

<div class="row">
    <input type="hidden" id="frmModified" value="N" />
    <input type="hidden" id="frmErrors" value="0" />
</div>
<div class="row" style="font-family:Arial; margin-top: 5px">
    <div class="col-sm-1"></div>
    <div class="col-md-10 " style="margin-left:15px; padding:0;">
        <div class="panel panel-default" style="margin-bottom:0px; " title="@tblCaption">
            <div class="panel-heading" style="text-align:center; padding: 0px 15px; ">
                <div class="row">
                    <div class="col-sm-11">
                        <div class="row @titleClass">
                            <span style="font-size:x-large; font-weight:bold; color:darkblue">@Model.metricName</span>
                        </div>
                        <div class="row">
                            <div class="input-group col-sm-10 col-sm-offset-1" style="padding:0px; ">
                                <span class="input-group-btn">
                                    <button id="btn-lastmonth" type="button" class="btn btn-primary" style="float:right; width:60px" onclick="location.href='@Model.lastMonthUrl'" title="Navigate to Previous Month" @Model.metricPrevPeriodStatus>
                                        <span class="glyphicon glyphicon-chevron-left"></span>
                                    </button>
                                </span>
                                <input type="text" class="form-control" value="@Model.displayPeriodName" readonly="readonly" style="min-width:100%; text-align:center; font-weight:bold; font-size:x-large; padding:0px">
                                <span class="input-group-btn">
                                    <button id="btn-nextmonth" type="button" class="btn btn-primary" style="float:right; width:60px" onclick="location.href='@Model.nextMonthUrl'" title="Navigate to Next Month" @Model.metricNextPeriodStatus>
                                        <span class="glyphicon glyphicon-chevron-right"></span>
                                    </button>
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-1" style="border:1px double lightgray">
                        <div class="row" style="text-align:center">
                            @if (Model.metricPeriodStatus.ToUpper().Equals("CLOSED"))
                            {
                                <img src="~/Images/locked.gif" width="35" /> <br />
                                <span style="font-size:xx-small; color:blue; ">Period is Closed</span>
                            }
                            else
                            {
                                <span style="font-size:xx-small; color:blue; ">STATUS:</span>
                                <span style="background-color:lightgreen; color:blue; font-weight:bold; font-size:x-large; padding:5px 8px; border-radius: 7px">@Model.metricPeriodStatus.ToUpper()</span><br />
                                <a href="javascript:closePeriod()"><span style="text-decoration: underline; font-size:x-small">[ Close Period ]</span></a>
                            }
                        </div>
                    </div>
                </div>

                @*<div class="row">
                    Validation Rules: [ Data Type: @Model.metricDataType ], [ Importable?: @Model.isImportable ], [ Data Automatic?: @Model.isAuto ], [Data Numeric?: @Model.isNumeric ], [ N/A Allowed?: @Model.na_allowed ]
                    <br />
                     [Metric Min Value: @Model.mtrcMinVal ], [Metric Max Value: @Model.mtrcMaxVal ], [Val Dec Places: @Model.maxDecPlaces ], [Val String Length: @Model.maxStrSize]
                </div>*@
            </div>
            <div class="panel-body">
                <div class="row" style="border:1px solid lightgray; border-radius: 5px; margin: 0 10px">  <!-- Table -->
                    <div class="row" style="margin:0px 1px; padding:0; text-align:center; background-color:aliceblue; border-bottom: 1px solid lightgrey;">
                        <div class="row headerRow" >
                            <div class="col-sm-2 col-sm-offset-4 buildingCol">
                                Building Name
                            </div>
                            <div class="col-sm-2 buildingCol">
                                @Model.periodName
                            </div>
                        </div>
                    </div>
                    <div class="row" style="margin:0px 1px; padding:0; height:550px; overflow-y:auto; text-align:center; ">
                    @foreach (REDZONE.Models.Building dscBldng in Model.buildingList)
                    {
                        <div class="row buildingRow" >
                            <div class="col-sm-2 col-sm-offset-4 buildingCol">
                                @dscBldng.buildingName
                            </div>
                            <div class="col-sm-2 buildingCol" style="text-align:center">
                                @if (Model.isAuto || Model.metricPeriodStatus.ToUpper().Equals("CLOSED") || !dscBldng.isEditable)
                                {//Value cannot be editable if the Metric is Automatic, closed or if the building level Value is not Editable
                                    <input type="text" id="newMetricVal" class="ROField" value="@dscBldng.metricPeriodValue" style="text-align:center; " readonly="readonly" /><br />
                                }
                                else
                                {
                                    <div class="row">
                                        <input type="text" id="newMetricVal" class="updateField" value="@dscBldng.metricPeriodValue" style="text-align:center; " />
                                    </div>
                                    <div class="row" style="text-align:center;">
                                        <span class="valValidationMsg" style="color:red; font-style:italic; display:none; text-align:center">*Validation Message</span>
                                    </div>
                                }
                                <input type="hidden" id="saveFlag" value="@dscBldng.saveFlag" />
                                <input type="hidden" id="buildingName" value="@dscBldng.buildingName" />
                                <input type="hidden" id="buildingId" value="@dscBldng.buildingCode" />
                                <input type="hidden" id="isEditable" value="@dscBldng.isEditable" />
                                <input type="hidden" id="isManual" value="@dscBldng.isManual" />
                                <input type="hidden" id="periodValId" value="@dscBldng.metricPeriodValueID" />
                            </div>
                        </div> <!-- End of "buildingRow" DIV-->
                    }
                    </div>
                </div> <!-- End of DIV Table Table -->


                @*<div class="row" style="margin:0px 1px; padding:0; height:550px; overflow-y:auto; text-align:center">
                    <table class="table table-bordered table-condensed table-hover table-responsive " style="width:98%">
                        <tr>
                            <th>
                                <div class="col-sm-2 col-sm-offset-1" style="text-align:center">
                                    Building Name
                                </div>
                                <div class="col-sm-2 " style="text-align:center">
                                    @Model.periodName
                                </div>
                            </th>
                        </tr>
                        @foreach (REDZONE.Models.Building dscBldng in Model.buildingList)
                        {
                            <tr class="buildingRow">
                                <td style="width:100%">
                                    <div class="row">
                                        <div class="col-sm-2 col-sm-offset-1">
                                            @dscBldng.buildingName
                                        </div>
                                        <div class="col-sm-2 " style="text-align:center">
                                            @if (Model.isAuto || Model.metricPeriodStatus.ToUpper().Equals("CLOSED") || !dscBldng.isEditable)
                                            {//Value cannot be editable if the Metric is Automatic, closed or if the building level Value is not Editable
                                                <input type="text" id="newMetricVal" class="ROField" value="@dscBldng.metricPeriodValue" style="text-align:center; margin-left: 20px" readonly="readonly" /><br />
                                            }
                                            else
                                            {
                                                <input type="text" id="newMetricVal" class="updateField" value="@dscBldng.metricPeriodValue" style="text-align:center; margin-left: 20px" /><br />
                                                <span class="valValidationMsg" style="color:red; font-style:italic; display:none">*Validation Message</span>
                                            }
                                            <input type="hidden" id="saveFlag" value="@dscBldng.saveFlag" />
                                            <input type="hidden" id="buildingName" value="@dscBldng.buildingName" />
                                            <input type="hidden" id="buildingId" value="@dscBldng.buildingCode" />
                                            <input type="hidden" id="isEditable" value="@dscBldng.isEditable" />
                                            <input type="hidden" id="isManual" value="@dscBldng.isManual" />
                                            <input type="hidden" id="periodValId" value="@dscBldng.metricPeriodValueID" />
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    </table>
                </div>*@ <!----------- END of HTML Table DIV----------> 



            </div>
        </div>
    </div>
</div>
<hr />
<div class="row">
    <div class="col-sm-2 col-sm-offset-2">
        @if (Model.isImportable)
        {
                @Html.ActionLink("Import Excel Data File", "UploadPreview", "Metric", Model, new { @class = "modal-link btn btn-primary" })
        }
    </div>
    @*<div class="col-sm-2 ">               <input id="btnEdit" class="btn-primary" type="button" value="EDIT" style="width:80px" disabled="disabled" /></div>*@
    <div class="col-sm-2 col-sm-offset-2"><input id="btnSave" class="btn btn-primary" type="button" value="SAVE" @if (ViewBag.fileuploaded != "Y") { <text> disabled="disabled" </text> } style="width:80px" /></div>
    <div class="col-sm-2 ">               <input id="btnCancel" class="btn btn-primary" type="button" value="CANCEL" style="width:80px" /></div>
</div>
<br />

<div id="posData" class="alert-info">
    @*@Model.headerJson*@
</div>
<div id="output"></div>

@* //=============================================== MODAL CONTAINER FOR POP UP WINDOWS ==================================\\
    This Modal pop up could also be added to the Layout Page so it can be utilized across all pages of the application
    The Popup is triggered by inserting a link action command (Button); for Example, In Razr Format:
    @Html.ActionLink("Click for Popup ", "ActionName", "HomeController", null, new { @class = "modal-link btn btn-success" })
    or regulat HTML sintax:
    <a class="modal-link btn btn-primary" href="/HomeController/ActionName">Click to display Pop up </a>
*@

<div id="modal-container" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-custom">
        <div class="modal-content">

        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

@* \\============================================== END OF CONTAINER FOR POP UP WINDOWS ==================================// *@


<script>
    $(document).ready(function () {
        $("#btnCancel").click(function () {
            location.href('/Home');
        });

        $(".updateField").on('change', function () {
            validateTxtField($(this));
        });

        $("#btnSave").click(function () {
            //Validate all input fields
            var errorsFound = 0;
            $("#frmErrors").val("0"); // Reset the errors counter before form validation
            //$(".updateField").each(function(){
            //    validateTxtField($(this));
            //});

            if(Number($("#frmErrors").val()) > 0){
                // Errors were found
                alert($("#frmErrors").val() + " Errors were found. Please correct errors before saving.");
            }
            else{
                //Proceed saving the data
                //alert("Saving Data...");
                //var payload1 = '{"metricdetail":{"mtrc_period_id":"1","mtrc_name":"Net FTE","mtrc_id":"3","mtrc_period_name":"Monthly Net FTE","tpt_name":"Month","tm_per_start_dtm":"2016-06-01 00:00:00.0","tm_per_end_dtm":"2016-06-30 23:59:59.0","prod_name":"Red Zone","data_type_token":"dec","data_type_num_yn":"Y"},"locationdetails":[{ "dsc_mtrc_lc_bldg_name": "Allentown 2","dsc_mtrc_lc_bldg_id": "2","bmp_is_editable_yn": "Y","bmp_is_manual_yn": "Y","mtrc_period_val_id": "122","mtrc_period_val_value": "TEST123"}]} ';
                var payload = buildJSON();
                //alert("Posting Data: \n" + payload);
                $("#posData").html(payload);    //For Debug Purposes
                $.ajax({
                    url: '/Metric/saveRZMetric',
                    //url: 'http://dscapidev/dscmtrc/api/v1/metric/metricperiodsave',
                    method: "POST",
                    cache: false,
                    //type: "POST",
                    //data: payload,
                    data: {raw_json:payload},
                    //contentType: "application/json; charset=utf-8",
                    //dataType: "json",
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert("Failed to Save Data. Ajax Failed!!\nError:" + textStatus + "," + errorThrown);  //<-- Trap and alert of any errors if they occurred
                    }
                }).done(function (d) {
                    if (d == "Success") {
                        var urlSufixx = "@Model.id?month=@curMonth&year=@curYear";
                        alert("Data Saved Successfully!");
                        //alert("Navigating to: /Metric/EditView/" + urlSufixx);
                        location.href = "/Metric/EditView/" + urlSufixx;
                        //location.reload();
                    } else {
                        alert("Error Saving the data!\n" + JSON.stringify(d));
                    }
                    //$("#output").html(JSON.stringify(d));
                });
            }

        });

        //-------------------------- MODAL EVENTS --------------------------------
        // Initalize modal dialog
        // attach modal-container bootstrap attributes to links with .modal-link class.
        // when a link is clicked with these attributes, bootstrap will display the href content in a modal dialog.
        $('body').on('click', '.modal-link', function (e) {
            e.preventDefault();
            $(this).attr('data-target', '#modal-container');
            $(this).attr('data-toggle', 'modal');
        });
        // Attach listener to .modal-close-btn's so that when the button is pressed the modal dialog disappears
        $('body').on('click', '.modal-close-btn', function () {
            $('#modal-container').modal('hide');
        });
        //clear modal cache, so that new content can be loaded
        $('#modal-container').on('hidden.bs.modal', function () {
            $(this).removeData('bs.modal');
        });
        $('#CancelModal').on('click', function () {
            return false;
        });
        //----------------- END OF MODAL EVENTS ----------------------------------
    });
    function closePeriod(){
        $.ajax({
            //url: '@Url.Action("closeRZMetricPeriod", "Metric")',
            url: '/Metric/closeRZMetricPeriod',
            method: "POST",
            cache: false,
            data: { metricId: "@Model.id", metricMonth:"@curMonth", metricYear:"@curYear" },
            error: function () {
                alert("Failed to Close Period.");  //<-- Trap and alert of any errors if they occurred

            }
        }).done(function (d) {
            if (d == "Success") {
                alert("Period Successfully Closed!");
                var urlSufixx = "@Model.id?month=@curMonth&year=@curYear";
                //alert("Navigating to: /Metric/EditView/" + urlSufixx);
                location.href = "/Metric/EditView/" + urlSufixx;

            }
            else {
                alert("ERROR Closing Period: " + d);
            } });
    }
    function buildJSON() {
        @*var periodId = @Model.metricPeriodID*@
        var userName = "";
        try { userName = "@Session["username"].ToString()"; }   //Verify that session did not expire.
        catch(err) {
            alert("Session Expired!\nPlease logon again.");
            location.href ="/Account/Logoff";
        }

        var jsonPayloadHeader = '{"metricdetail":{"mtrc_period_id":"@Model.metricPeriodID","mtrc_name":"@Model.metricName","mtrc_id":"@Model.id","mtrc_period_name":"@Model.periodName.Replace("Metric Information", "")","tpt_name":"@Model.period_Type","tm_per_start_dtm":"@Model.metric_period_start_date.ToString("yyyy-MM-dd HH:mm:ss")","tm_per_end_dtm":"@Model.metric_period_end_date.ToString("yyyy-MM-dd HH:mm:ss")","prod_name":"Red Zone","data_type_token":"@Model.metricDataType","data_type_num_yn":"Y"},';
        var jsonPayloadDetail = '"locationdetails":[';
        //Loop thorugh all building and build a location Detail JSON payload for each bnuilding that was edited
        var recordsChanged = 0;
        $(".buildingRow").each(function () {
            // Loop thoruh all building rows
            //alert("Building is "+$(this).find("#buildingName").first().val()+" and flag is "+$(this).find("#saveFlag").first().val());
            if ($(this).find("#saveFlag").first().val() == "Y") {//If this Building Value was Edited add it to the payload
                if (recordsChanged > 0) { jsonPayloadDetail = jsonPayloadDetail + ","; }
                jsonPayloadDetail = jsonPayloadDetail + '{ "dsc_mtrc_lc_bldg_name": "' + $(this).find("#buildingName").first().val() + '","dsc_mtrc_lc_bldg_id": "' + $(this).find("#buildingId").first().val() + '","UserId": "@Session["username"].ToString()","bmp_is_editable_yn": "Y","bmp_is_manual_yn": "Y","bmp_na_allow_yn": "Y","mtrc_period_val_id": "' + $(this).find("#periodValId").first().val() + '","mtrc_period_val_value": "' + $(this).find("#newMetricVal").first().val() + '"}';

                recordsChanged = recordsChanged + 1;
            }
        });

        //alert( recordsChanged + " building were Updated.");
        jsonPayloadDetail = jsonPayloadDetail + ']}';

        return jsonPayloadHeader + jsonPayloadDetail
    }

    function validateNumEntry(txtControl, dataType, minVal, maxVal, decPlaces ) {
        // First Validation. If input values is null or empty. It passes
        if (txtControl.val() == "") return "PASS";

        var txtValue = txtControl.val();
        var validationMessage = "PASS";
        var inputIntValue = Number(txtValue);
        var minRange = Number(minVal);
        var maxRange = Number(maxVal);

        //Second Validation, make sure that the input value is a number.
        if (isNaN(inputIntValue)) {  // Value is not a number
            return "Value must be numeric";
        }

        if (dataType == "int")
        {// Integer Value cannot have decimal values
            if (txtValue.includes(".")) {
                validationMessage =  "Value must not contain decimals";
            }
        }else
            if (dataType == "dec") {
                //There is no custom validation for now
            }else
                if (dataType == "cur") {
                    //There is no custom validation for now
                }else
                    if (dataType == "pct") {
                        //There is no custom validation for now
                    }

        //Round value off to the requiered number of decimal places for all non integer values
        if (dataType != "int"){
            //parseFloat(txtValue).toFixed(2);
            txtControl.val(inputIntValue.toFixed(Number(decPlaces)) );
        }

        //Check Min and Max for all data types
        if ( inputIntValue < minRange || inputIntValue > maxRange) {
            validationMessage =  "Value must be between " + minVal + " and " + maxRange;
        }

        return validationMessage;
    }

    function validateStrEntry(txtValue, strLength) {
        var stringLength = Number(strLength);
        if ( stringLength == 0 || isNaN(stringLength)) {
            //alert("Length is not a number");
            //The Length is undefined. We will assume that any lenght is valid
            return "PASS"
        }
        if (txtValue.length < Number(strLength)) {
            return "PASS";
        }
        return "The Value '" + txtValue + "' Exceeds the maximum length of " + strLength;
    }

    function validateTxtField($txtControl){
        //Validate the Entered Value
        //$(this)
        $txtControl.val($txtControl.val().trim());   //Trim the spaces from the input
        var valMessage = "";
        var newValue = $txtControl.val();
        var valControl = $txtControl.parents(".buildingRow").first().find(".valValidationMsg").first();
        //alert("New value is: " + valControl.prop("id") );

        //First Check if the Value entered is N/A. If so and "N/A" is acceptable then the validation passed without further validation
        if ((newValue.toLocaleUpperCase() == "NA" || newValue.toLocaleUpperCase() == "N/A") && "@Model.na_allowed" == "True") {
            $txtControl.val("N/A");
            valMessage = "PASS";
        }
        else {
            //Perform either the Numeric or the String Validations
            if ("@Model.isNumeric" == "True") {
                //Validate the input as a number
                valMessage = validateNumEntry($txtControl, "@Model.metricDataType", "@Model.mtrcMinVal", "@Model.mtrcMaxVal", @Model.maxDecPlaces);
                //alert("result: " + valMessage);
            }
            else {
                //Perform the String Validation
                valMessage = validateStrEntry(newValue, "@Model.maxStrSize" );
            }
            //Check the result of the validation
        }
        if (valMessage == "PASS") {
            //Input Value is valid. Erase the error message and Change the "Control Updated" flag.
            $txtControl.removeClass("error");
            $txtControl.addClass("no-error");
            valControl.hide();
            $txtControl.parents(".buildingRow").find("#saveFlag").first().val("Y");
            $("#frmModified").val("Y");
            $("#btnSave").prop('disabled', false);
        }
        else{ //Validation Failed
            $("#frmErrors").val(Number($("#frmErrors").val()) + 1);  //Increase the Form errors counter
            $txtControl.focus();
            $txtControl.removeClass("no-error");
            $txtControl.addClass("error");
            valControl.html(valMessage);
            valControl.show();
            $("#btnSave").prop('disabled', true);
        }

    }
</script>
