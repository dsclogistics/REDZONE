@model REDZONE.Models.RZ_Metric
@{ ViewBag.Title = "Model Metric";
 string titleClass = "alert-standard";
 if (Model.metricName.Equals("Requested Metric Period does not Exist")) { titleClass = "alert-danger"; };
 
 var curMonth = @Model.displayPeriodName.Substring(0, @Model.displayPeriodName.IndexOf(" "));
 var curYear = @Model.displayPeriodName.Substring(@Model.displayPeriodName.IndexOf(" ") + 1); 
}
<link href="~/Content/RedZoneApp.css" rel="stylesheet" />
<style>
    th {
        background-color: aliceblue;
    }

    td.center {
        text-align: center;
    }

    .alert-standard {
        background-color: #f1f0f0;
    }

    /*.modal-content {
        width: 80% !important;
        margin: 30px auto !important;
    }*/
</style>


<div class="row" style="font-family:Arial; margin-top: 5px">
    <div class="col-sm-1"></div>
    <div class="col-md-10 " style="margin-left:15px; padding:0;">
        <div class="panel panel-default" style="margin-bottom:0px; ">
            <div class="panel-heading" style="text-align:center; padding: 0px 15px; ">
                <div class="row @titleClass">
                    <span style="font-size:x-large; font-weight:bold; color:darkblue">@Model.metricName</span>
                </div>
                <div class="row">
                    <div class="input-group col-sm-10 col-sm-offset-1" style="padding:0px; ">
                        <span class="input-group-btn">
                            <button id="btn-lastmonth" type="button" class="btn btn-primary" style="float:right; width:60px" onclick="location.href='@Model.lastMonthUrl'" title="Navigate to Previous Month">
                                <span class="glyphicon glyphicon-chevron-left"></span>
                            </button>
                        </span>
                        <input type="text" class="form-control" value="@Model.displayPeriodName" readonly="readonly" style="min-width:100%; text-align:center; font-weight:bold; font-size:x-large; padding:0px">
                        <span class="input-group-btn">
                            <button id="btn-nextmonth" type="button" class="btn btn-primary" style="float:right; width:60px" onclick="location.href='@Model.nextMonthUrl'" title="Navigate to Next Month">
                                <span class="glyphicon glyphicon-chevron-right"></span>
                            </button>
                        </span>
                    </div>
                </div>
                <div class="row">
                    Validation Rules: [ Data Type: @Model.metricDataType ], [ Importable?: @Model.isImportable ], [ Data Automatic?: @Model.isAuto ], [Data Numeric?: @Model.isNumeric ], [ N/A Allowed?: @Model.na_allowed ]
                    <br />
                     [Metric Min Value: @Model.mtrcMinVal ], [Metric Max Value: @Model.mtrcMaxVal ], [Val Dec Places: @Model.maxDecPlaces ], [Val String Length: @Model.maxStrSize]
                </div>
            </div>
            <div class="panel-body">
                <div class="row" @*style="text-align:center"*@ style="margin:0px 1px; padding:0; height:550px; overflow-y:auto">
                    <table class="table table-bordered table-condensed table-hover table-responsive ">
                        <tr>
                            <th>Building Name</th>
                            <th style="text-align:center"><span>Value</span></th>
                        </tr>
                        @foreach (REDZONE.Models.Building dscBldng in Model.buildingList)
                        {
                            <tr class="buildingRow">
                                <td>@dscBldng.buildingName</td>
                                <td class="left" style="text-align:center">
                                    @if (!Model.isAuto || dscBldng.isEditable)
                                    {//Value can be editable only if the Metric is Not Automatic and if the building level Value is Editable
                                        <input type="text" id="newMetricVal" class="updateField" value="@dscBldng.metricPeriodValue" style="text-align:center; margin-left: 20px" /><br />
                                        <span class="valValidationMsg" style="color:red; font-style:italic; display:none">*Validation Message</span>
                                    }
                                    else
                                    {
                                        <span>@dscBldng.metricPeriodValue</span>
                                    }
                                    <input type="hidden" id="saveFlag" value="@dscBldng.saveFlag" />
                                    <input type="hidden" id="buildingName" value="@dscBldng.buildingName" />
                                    <input type="hidden" id="buildingId" value="@dscBldng.buildingCode" />
                                    <input type="hidden" id="isEditable" value="@dscBldng.isEditable" />
                                    <input type="hidden" id="isManual" value="@dscBldng.isManual" />
                                    <input type="hidden" id="periodValId" value="@dscBldng.metricPeriodValueID" />
                                </td>
                            </tr>
                        }
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<hr />
<div class="row">
    <div class="col-sm-2 col-sm-offset-2">
        @Html.ActionLink("Import Excel Data File", "UploadPreview", "Metric", Model, new { @class = "modal-link btn btn-primary" })
        @*<input id="btnImport" class="btn-primary" type="button" value="IMPORT" style="width:80px" />*@
    </div>
    <div class="col-sm-2 ">               <input id="btnEdit" class="btn-primary" type="button" value="EDIT" style="width:80px" disabled="disabled" /></div>
    <div class="col-sm-2 col-sm-offset-1"><input id="btnSave" class="btn-primary" type="button" value="SAVE" style="width:80px" /></div>
    <div class="col-sm-2 ">               <input id="btnCancel" class="btn-primary" type="button" value="CANCEL" style="width:80px" /></div>
</div>
<br />


<div id="posData" class="alert-info">
    @*@Model.headerJson*@
</div>
<div id="output"></div>

@* //=============================================== MODAL CONTAINER FOR POP UP WINDOWS ==================================\\
    This Modal pop up could also be added to the Layout Page so it can be utilized across all pages of the application
    The Popup is triggered by inserting a link action command (Button); for Example, In Razr Format:
    @Html.ActionLink("Click for Popup ", "ActionName", "HomeController", null, new { @class = "modal-link btn btn-success" })
    or regulat HTML sintax:
    <a class="modal-link btn btn-primary" href="/HomeController/ActionName">Click to display Pop up </a>
*@

<div id="modal-container" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-custom">
        <div class="modal-content">

        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

@* \\============================================== END OF CONTAINER FOR POP UP WINDOWS ==================================// *@


<script>
    $(document).ready(function () {
        $("#btnCancel").click(function () {
            location.href('/Home');
        });

        $(".updateField").on('change', function () {
            //Validate the Entered Value
            var newValue = $(this).val();
            var valControl = $(this).parents(".buildingRow").first().find(".valValidationMsg").first();
            //alert("New value is: " + valControl.prop("id") );
            var failedValidation = true;

            //First Check if the Value entered is N/A. If so and "N/A" is acceptable then the validation passed without further validation
            if ((newValue.toLocaleUpperCase() == "NA" || newValue.toLocaleUpperCase() == "N/A") && "@Model.na_allowed" == "True") {
                failedValidation = false;
            }
            else {
                if ("@Model.isNumeric" == "True") {
                    // Perform the Numeric Validations

                }
                else {
                    //Perform the String Validations

                }
            }

            alert("Failed Validation? " + failedValidation);
            if (failedValidation) {
                valControl.html("Validation Failed.");
                valControl.show();
            }
            else {
                //Input Value is valid. Erase the error message and Change the "Control Updated" flag.
                valControl.hide();
                $(this).parents(".buildingRow").find("#saveFlag").first().val("Y");
            }

        });

        $("#btnSave").click(function () {
            //alert("Saving Data...");
            //var payload1 = '{"metricdetail":{"mtrc_period_id":"1","mtrc_name":"Net FTE","mtrc_id":"3","mtrc_period_name":"Monthly Net FTE","tpt_name":"Month","tm_per_start_dtm":"2016-06-01 00:00:00.0","tm_per_end_dtm":"2016-06-30 23:59:59.0","prod_name":"Red Zone","data_type_token":"dec","data_type_num_yn":"Y"},"locationdetails":[{ "dsc_mtrc_lc_bldg_name": "Allentown 2","dsc_mtrc_lc_bldg_id": "2","bmp_is_editable_yn": "Y","bmp_is_manual_yn": "Y","mtrc_period_val_id": "122","mtrc_period_val_value": "TEST123"}]} ';
            var payload = buildJSON();

            //alert("Posting Data: \n" + payload);
            //$("#posData").html(payload);
            $.ajax({
                url: '/Metric/saveRZMetric',
                //url: 'http://dscapidev/dscmtrc/api/v1/metric/metricperiodsave',
                method: "POST",
                cache: false,
                //type: "POST",
                //data: payload,
                data: {raw_json:payload},
                //contentType: "application/json; charset=utf-8",
                //dataType: "json",
                error: function (jqXHR, textStatus, errorThrown) {
                    alert("Failed to Save Data. Ajax Failed!!\nError:" + textStatus + "," + errorThrown);  //<-- Trap and alert of any errors if they occurred
                }
            }).done(function (d) {
                if (d == "Success") {
                    var urlSufixx = "@Model.id?month=@curMonth&year=@curYear";
                    alert("Data Saved Successfully!");
                    //alert("Navigating to: /Metric/EditView/" + urlSufixx);
                    location.href = "/Metric/EditView/" + urlSufixx;
                    //location.reload();
                } else {
                    alert("Error Saving the data!\n" + JSON.stringify(d));
                }
                //$("#output").html(JSON.stringify(d));
            });
        });
        //-------------------------- MODAL EVENTS --------------------------------
        // Initalize modal dialog
        // attach modal-container bootstrap attributes to links with .modal-link class.
        // when a link is clicked with these attributes, bootstrap will display the href content in a modal dialog.
        $('body').on('click', '.modal-link', function (e) {
            e.preventDefault();
            $(this).attr('data-target', '#modal-container');
            $(this).attr('data-toggle', 'modal');
        });
        // Attach listener to .modal-close-btn's so that when the button is pressed the modal dialog disappears
        $('body').on('click', '.modal-close-btn', function () {
            $('#modal-container').modal('hide');
        });
        //clear modal cache, so that new content can be loaded
        $('#modal-container').on('hidden.bs.modal', function () {
            $(this).removeData('bs.modal');
        });
        $('#CancelModal').on('click', function () {
            return false;
        });
        //----------------- END OF MODAL EVENTS ----------------------------------
    });

    function buildJSON() {
        //var periodId = @Model.metricPeriodID
        var jsonPayloadHeader = '{"metricdetail":{"mtrc_period_id":"@Model.metricPeriodID","mtrc_name":"@Model.metricName","mtrc_id":"@Model.id","mtrc_period_name":"@Model.periodName.Replace("Metric Information", "")","tpt_name":"@Model.period_Type","tm_per_start_dtm":"@Model.metric_period_start_date.ToString("yyyy-MM-dd HH:mm:ss")","tm_per_end_dtm":"@Model.metric_period_end_date.ToString("yyyy-MM-dd HH:mm:ss")","prod_name":"Red Zone","data_type_token":"dec","data_type_num_yn":"Y"},';
        var jsonPayloadDetail = '"locationdetails":[';
        //Loop thorugh all building and build a location Detail JSON payload for each bnuilding that was edited
        var recordsChanged = 0;
        $(".buildingRow").each(function () {
            // Loop thoruh all building rows
            if ($(this).find("#saveFlag").first().val() == "Y") {//If this Building Value was Edited add it to the payload
                if (recordsChanged > 0) { jsonPayloadDetail = jsonPayloadDetail + ","; }
                jsonPayloadDetail = jsonPayloadDetail + '{ "dsc_mtrc_lc_bldg_name": "' + $(this).find("#buildingName").first().val() + '","dsc_mtrc_lc_bldg_id": "' + $(this).find("#buildingId").first().val() + '","bmp_is_editable_yn": "Y","bmp_is_manual_yn": "Y","mtrc_period_val_id": "' + $(this).find("#periodValId").first().val() + '","mtrc_period_val_value": "' + $(this).find("#newMetricVal").first().val() + '"}';

                recordsChanged = recordsChanged + 1;
            }
        });

        //alert( recordsChanged + " building were Updated.");
        jsonPayloadDetail = jsonPayloadDetail + ']}';

        return jsonPayloadHeader + jsonPayloadDetail
    }

    function validateNumEntry(txtValue, dataType, test) {
        var validationMessage = "PASS";
        validationMessage = txtValue + " " + message;

        return validationMessage;
    }

    function validateStrEntry(txtValue, strLength) {
        if (isNaN(Number(strLength))) {
            //The Length is undefined. We will assume that any lenght is valid
            return "PASS"
        }
        if (txtValue.length > Number(strLength)) {
            return "The Value '" + txtValue + "' Exceeds the maximum length of " + strLength;
        }
        return "PASS";
    }
</script>