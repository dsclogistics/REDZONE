@model REDZONE.Models.RZ_Metric
@{
    ViewBag.Title = "Model Metric";
    string titleClass = "alert-standard";
    if (Model.metricName.Equals("Requested Metric Period invalid or does not Exist")) { titleClass = "alert-danger"; };

    var curMonth = @Model.displayPeriodName.Substring(0, @Model.displayPeriodName.IndexOf(" "));
    var curYear = @Model.displayPeriodName.Substring(@Model.displayPeriodName.IndexOf(" ") + 1);
    string tblCaption = "";

    if (Model.metricPeriodStatus != null && Model.metricPeriodStatus.ToUpper().Equals("CLOSED")) tblCaption = "Warning, the current metric period has been closed and it cannot longer be modified.";
    if (Model.isAuto) tblCaption = "Warning, the values for this metric are generated automatically. They cannot be modified.";
    string errorMessage = (Session["metricSaveMsg"] == null)?"":Session["metricSaveMsg"].ToString();
    Session["metricSaveMsg"] = ""; // Reset the error Message always
}
<link href="~/Content/RedZoneApp.css" rel="stylesheet" />
<link href="~/Content/EditView.css" rel="stylesheet" />

<div class="row">
    <input type="hidden" id="frmModified" value="N" />
    <input type="hidden" id="frmErrors" value="0" />
</div>

<div class="row" style="font-family:Arial; margin-top: 5px; width:100%;">
    <div class="panel panel-default" style="margin: 0px 0px 0px 0px;" title="@tblCaption">
        <div class="panel-heading" style="text-align:center; padding: 0px 15px;">
            <div class="row">
                <div class="col-sm-1" style="border:1px double lightgray">
                    <div class="row" style="text-align:center">
                        @if (Model.metricPeriodStatus.ToUpper().Equals("CLOSED"))
                        {
                            <img src="~/Images/locked.gif" width="50" style="margin-top:5px; margin-bottom:0px; padding:0;" /> <br />
                            <span style="font-size:small; font-weight:bold; color:blue; ">PUBLISHED</span>
                        }
                        else
                        {
                            @*<span style="font-size:xx-small; color:blue; ">STATUS:</span>
                            <span style="background-color:lightgreen; color:blue; font-weight:bold; font-size:x-large; padding:5px 8px; border-radius: 7px">@Model.metricPeriodStatus.ToUpper()</span><br />
                            <br />*@
                            <img src="~/Images/Unlock-icon.png" width="50" style="margin-top:5px; margin-bottom:0px; padding:0;" /> <br />
                            <span style="font-size:small; font-weight:bold; color:blue; ">UNPUBLISHED</span>
                        }
                    </div>
                </div>
                <div class="col-sm-10">
                    <div class="row @titleClass">
                        <span style="font-size:x-large; font-weight:bold; color:darkblue">@Model.metricName</span>
                    </div>
                    <div class="row">
                        <div class="input-group col-sm-10 col-sm-offset-1" style="padding:0px; ">
                            <span class="input-group-btn">
                                <button id="btn-lastmonth" type="button" class="btn btn-primary" style="float:right; width:60px" onclick="location.href='@Model.lastMonthUrl'" @Model.metricPrevPeriodStatus title="Navigate to Previous Month">
                                    <span class="glyphicon glyphicon-chevron-left"></span>
                                </button>
                            </span>
                            <input type="text" class="form-control" value="@Model.displayPeriodName" readonly="readonly" style="min-width:100%; text-align:center; font-weight:bold; font-size:x-large; padding:0px">
                            <span class="input-group-btn">
                                <button id="btn-nextmonth" type="button" class="btn btn-primary" style="float:right; width:60px" onclick="location.href='@Model.nextMonthUrl'" @Model.metricNextPeriodStatus title="Navigate to Next Month">
                                    <span class="glyphicon glyphicon-chevron-right"></span>
                                </button>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="col-sm-1">
                </div>
            </div>
            @*<div class="row">
                    Validation Rules: [ Data Type: @Model.metricDataType ], [ Importable?: @Model.isImportable ], [ Data Automatic?: @Model.isAuto ], [Data Numeric?: @Model.isNumeric ], [ N/A Allowed?: @Model.na_allowed ]
                    <br />
                    [Metric Min Value: @Model.mtrcMinVal ], [Metric Max Value: @Model.mtrcMaxVal ], [Val Dec Places: @Model.maxDecPlaces ], [Val String Length: @Model.maxStrSize]
                </div>*@
        </div>

        @if (Model.isModelValid)   //Valid Data was Retrieved
        {
            <div class="panel-body" style="padding: 8px; width:100%; text-align:center">
                @{
            string fontColor = Model.metricPeriodStatus.ToUpper().Equals("CLOSED") ? "darkgray" : "black";
            //string editStatus = Model.metricPeriodStatus.ToUpper().Equals("CLOSED") ? "readonly" : "";
                }

                <div class="row" id="sectionWait" style="padding:20px; display:none">
                    <div style="margin-top:10%; width:60%; margin:0 auto; margin-bottom:10%; border:1px solid #eeeeee">
                        <div class="alert-info" style="font-size:large; margin-top:40px ">Please wait while information is updated...</div>
                        <div style="margin-top:50px"><img src="~/Images/ui-anim_basic_16x16.gif" /></div>
                        <br /><br />
                        <div style="margin-bottom:80px">Elapsed Time is <span id="divCounter" style="font-weight:bold">0</span> Seconds</div>
                    </div>
                </div>
                <div class="row" id="sectionBuildings" style="border:1px solid lightgray; border-radius: 5px; margin: 0 auto; ">
                    <div class="row " style="margin:0; font-weight:bold; background-color: #e3f3f6; font-size: medium; text-align:center; border-bottom: 1px solid lightgrey;">
                        <table style="width:100%">
                            <tr>
                                <td class="" style="">
                                    <div class="row " style="margin:0">
                                        <div class=" row " style="width:70%; min-width:300px; margin:0 auto;">
                                            <div class="col-xs-5" style="text-align:right;  padding:0">
                                                <span class="hdrLabel" style="float:right; border-right: 1px solid lightgray">
                                                    Building Name
                                                </span>
                                            </div>
                                            <div class="col-xs-7 " style="text-align:left; padding: 0">
                                                <span class="hdrLabel" style="float:left; border-left: 1px solid lightgray">
                                                    @Model.periodName
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                                <td class="" style="width:18px"><br /></td>
                            </tr>
                        </table>
                        @*<div class="col-sm-3 col-sm-offset-1 col-xs-6" style="padding-left:110px">Building Name</div>
                            <div class="col-sm-6 col-xs-6" style="text-align:left; padding-left:50px">@Model.periodName</div>*@
                    </div>

                    <div class="pnlScrollable ">
                        @foreach (REDZONE.Models.Building dscBldng in Model.buildingList)
                        {
                            <div class="row bldngRow " style="margin:0; padding-bottom:1px; padding-top:3px; color:@fontColor">
                                <div class="row">
                                    <div class=" row " style="width:70%; min-width:250px; margin:0 auto; ">
                                        <div class="col-xs-5 " style="text-align:right; padding: 0">
                                            <span class="group-label" style="min-width:50px; width:155px;">@dscBldng.buildingName</span>
                                        </div>
                                        <div class="col-xs-7 " style="text-align:left; padding:0">
                                            @if (Model.metricPeriodStatus.ToUpper().Equals("CLOSED") || !dscBldng.isEditable)
                                            {//Value cannot be editable if the Metric is Automatic, closed or if the building level Value is not Editable
                                                <input type="text" class="group-value txtInput ROField" id="newMetricVal" value="@dscBldng.metricPeriodValue"
                                                       readonly="readonly" disabled title="This Value Cannot be Edited" />
                                                if (!dscBldng.isEditable)
                                                { <text><span style="color:blue; font-weight:bold; font-size:small; float:left">+</span></text> }
                                            }
                                            else
                                            {
                                                string valueTitle = "";
                                                if (!dscBldng.naAllowed) { valueTitle = "Value is required ('N/A' not allowed)"; }
                                                else { valueTitle = "Enter value or N/A"; }
                                                <input type="text" class="group-value txtInput updateField" id="newMetricVal"
                                                       value="@dscBldng.metricPeriodValue" title="@valueTitle" />
                                                if (!dscBldng.naAllowed)
                                                { <text><span style="color:red; font-weight:bold; font-size:medium; float:left">*</span></text> }
                                            }
                                        </div>
                                    </div>

                                    @*<div class="col-sm-1">
                                            @if (!dscBldng.isEditable) { <text><span style="color:blue; font-weight:bold; float:left">+</span></text> }
                                        </div>*@

                                </div>
                                <div class="row" style="text-align:center;">
                                    <div class="col-sm-8 col-sm-offset-2">
                                        <span class="valValidationMsg" style="color:red; font-style:italic; display:none; text-align:center">*Validation Message</span>
                                    </div>
                                </div>
                                <input type="hidden" id="saveFlag" value="@dscBldng.saveFlag" />
                                <input type="hidden" id="buildingName" value="@dscBldng.buildingName" />
                                <input type="hidden" id="buildingId" value="@dscBldng.buildingCode" />
                                <input type="hidden" id="isEditable" value="@dscBldng.isEditable" />
                                <input type="hidden" id="isManual" value="@dscBldng.isManual" />
                                <input type="hidden" id="periodValId" value="@dscBldng.metricPeriodValueID" />
                                <input type="hidden" id="isNAallowed" value="@dscBldng.naAllowed.ToString()" />
                                <input type="hidden" id="isNA" value="" />
                            </div>
                        }
                        <br />
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-xs-11">
                            <div class="row " style="max-width:400px; margin:0 auto">
                                <span style="color:red"> * Value is Required</span>
                                <span style="color:blue; margin-left:45px"> + Automated Value</span>
                            </div>
                        </div>
                    </div>
                </div>

            </div>

            if (Model.metricPeriodStatus.ToUpper().Equals("CLOSED"))
            {
                <div class="row" style="margin:0; ">
                    <div class="col-sm-10 ">
                        <span style="font-size:large; color:red">THIS METRIC PERIOD CANNOT BE EDITED</span>
                    </div>
                </div>
            }
            else
            {
                <div class="row" id="sectionButtons" style="margin:0">
                    @*--------- Form Buttons Sections --------------*@
                    <div class="col-sm-2 col-sm-offset-1">
                        @if (Model.isImportable)
                        {
                            @Html.ActionLink("Import Excel File", "UploadPreview", "Metric", Model, new { @class = "modal-link btn btn-primary" })
                        }
                        @if (Model.isAuto)
                        {                          @*@if (Model.metricName.Equals("Volume"))*@
                            <input type="button" id="btnRecalcMetric" class="btn btn-primary" value="Refresh Automated Values" style="margin-left:88px"/>
                        }
                    </div>
                    <div class="col-sm-4 col-sm-offset-2">
                        <input type="button" id="btnSave" class="btn btn-primary" title="Click to Save Data without clossing the Metric Period" value="SAVE" @if (ViewBag.fileuploaded != "Y") { <text> disabled="disabled" </text>               } style="width:80px" />
                        <input type="button" id="btnPublish" class="btn btn-primary" value="PUBLISH" style="width:80px; margin-left:50px" title="Publishing Data will Save and Close the Current Metric Period" />
                        <input type="button" id="btnCancel" class="btn btn-primary" value="CANCEL" style="width:80px; margin-left:50px" />
                    </div>
                    @if (Model.isImportable)
                    {// Dsisplay the Download Template Button (To be used for importing/uploading the metric data)
                        <div class="col-sm-1 col-sm-offset-2">
                            <form id="exportToExcel" action="/Metric/downloadTemplate" target="_blank" method="post">
                                <input type="hidden" name="metricName" value="@Model.metricName" />
                                <input type="hidden" name="year" value="@curYear" />
                                <input type="hidden" name="month" value="@curMonth" />
                                <input type="hidden" name="allBuildings" value="@Model.allBuildings" />
                                <button id="btnDwnldTemplate1" type="submit" class="btn btn-default" style="float:right">
                                    <span class="glyphicon glyphicon-download-alt" aria-hidden="true"></span><span style="margin-left:11px">Excel Template</span>
                                </button>
                            </form>
                        </div>
                    }
                </div>  <!-- ------ Form Buttons ROW End Section--------- -->
                <div class="row alert-success" id="divMsg" style="padding: 7px; font-weight:bold; font-size:large; text-align:center; display:none">
                    @errorMessage
                </div>
            }
            <br />
        } // End of the Area that is rendered when a valid Model/Data is retrieved
        else
        { // No valid Data was Found. Display an error message
            <br />
            <div class="row" style="color:red; font-size:large; border:4px double black; margin:5px 15px; padding:40px; background-color: lightgray; border-radius:8px">
                <span style="font-weight:bold; ">THERE IS NO DATA AVAILABLE FOR THE SELECTED METRIC PERIOD</span>
                <br /><span style="text-align:center"></span>
            </div>
            <br />
        }
    </div>
</div>

<div id="messageLine" class="row" style="display:none; width:100%; font-weight:bold; color:red; text-align:center;">
</div>
<br />
@*<iframe id="fileFrame"></iframe>
    <br /><br /><br /><br />*@
<div id="output"></div>

@* //=============================================== MODAL CONTAINER FOR POP UP WINDOWS ==================================\\
        This Modal pop up could also be added to the Layout Page so it can be utilized across all pages of the application
        The Popup is triggered by inserting a link action command (Button); for Example, In Razr Format:
        @Html.ActionLink("Click for Popup ", "ActionName", "HomeController", null, new { @class = "modal-link btn btn-success" })
        or regulat HTML sintax:
    <a class="modal-link btn btn-primary" href="/HomeController/ActionName">Click to display Pop up </a>
*@

<div id="modal-container" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-custom">
        <div class="modal-content">

        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
@* \\============================================== END OF CONTAINER FOR POP UP WINDOWS ==================================// *@


<script>
    $(document).ready(function () {
        if ("@errorMessage" != ""){
            $("#divMsg").show().fadeOut(3000);
        }

        $("#btnCancel").click(function () {
            //location.href('/Home');
            location.reload();
        });

        $(".updateField").on('keypress', function () {
            $("#btnSave").prop('disabled', false);
        });

        $(".updateField").on('change', function () {
            var $txtControl = $(this);
            var valControl = $(this).parents(".bldngRow").first().find(".valValidationMsg").first();
            valMessage = validateTxtField($(this));
            if (valMessage == "PASS"){
                //Value Entered is Valid
                $txtControl.removeClass("error");
                $txtControl.addClass("no-error");
                valControl.hide();
                $txtControl.parents(".bldngRow").find("#saveFlag").first().val("Y");
                $("#frmModified").val("Y");
                $("#btnSave").prop('disabled', false);
            }
            else{
                //Validation Failed. Value entered is not valid
                var valControl = $(this).parents(".bldngRow").first().find(".valValidationMsg").first();
                //Validation Failed. Increase the error count and report the error
                $txtControl.removeClass("no-error");
                $txtControl.addClass("error");
                valControl.html(valMessage);
                valControl.show();
                $("#btnSave").prop('disabled', true);
                $txtControl.focus();
            }
        });

        $("#btnSave").click(function () {
            //Validate all input fields
            var errorsFound = 0;
            var valMessage = "";
            $("#frmErrors").val("0"); // Reset the errors counter before form validation
            //Loop through all text boxes to validate each one of them and cound how many failed.
            $(".updateField").each(function(){
                valMessage = validateTxtField($(this));
                if (!(valMessage == "PASS")){
                    var valControl = $(this).parents(".bldngRow").first().find(".valValidationMsg").first();
                    //Validation Failed. Increase the error count and report the error
                    errorsFound = errorsFound + 1;
                    $txtControl.removeClass("no-error");
                    $txtControl.addClass("error");
                    valControl.html(valMessage);
                    valControl.show();
                    $("#btnSave").prop('disabled', true);
                    $txtControl.focus();
                }
            });
            $("#frmErrors").val(errorsFound);  //Save the total number of errors found

            if(errorsFound > 0){
                // Errors were found
                alert(errorsFound + " Errors were found. Please correct errors before saving.");
            }
            else{
                //Proceed saving the data
                saveMetricData(false);
            }

        });

        //$("#btnDwnldTemplate").click(function(){
        //    alert("Template Download Function Not implemented yet.");
        //    //$.ajax({
        //    //    type: 'POST',
        //    //    url: '/Reports/ExportMyData',
        //    //    data: '{ "dataprop1": "test", "dataprop2" : "test2" }',
        //    //    contentType: 'application/json; charset=utf-8',
        //    //    dataType: 'json',
        //    //    success: function (returnValue) {
        //    //        window.location = '/Reports/Download?file=' + returnValue;
        //    //    }
        //    //});

        //    //document.getElementById('calendar').src = loc;
        //    //$("#fileFrame").prop("src", "http://www.msn.com");
        //    //$("#fileFrame").prop("src", "/metric/downloadTemplate");
        //});
        $("#btnPublish").click(function(){
            saveMetricData(true);
        });

        $("#btnRecalcMetric").click(function(){

            var metricId = "@Model.id";
            var metricDateInfo =  "@Model.displayPeriodName".split(" ");
            var metricMonth = metricDateInfo[0];
            var metricYear = metricDateInfo[1];
            var secCounter = 0;
            //alert("Reloading metric Id: "+ metricId + "\nFor Month: "+ metricMonth + "\nFor Year: "+ metricYear);

            //show the "loading" animation until ajax call completes
            $("#sectionButtons").hide();
            $("#sectionBuildings").hide();
            $("#sectionWait").show();

            // We need parameters: "metricId", "month", "year"
            var myInterval = setInterval(function(){
                secCounter = secCounter + 1;
                $("#divCounter").html(secCounter)
            }, 1000);

            $.ajax({
                url: '/Metric/reloadMetric',   //url: 'http://dscapidev/dscmtrc/api/v1/metric/metricperiodsave',
                method: "POST",
                cache: false,
                //type: "POST",
                //data: payload,
                data: {metricId:metricId, month: metricMonth, year: metricYear},
                timeout: 25000 // sets timeout to 25 seconds
            })
            .done(function (d) {
                if (d == "Success") {
                    //alert("Data Reloaded Successfully!");
                    location.reload();
                } else {
                    alert("Error performing Data Reload: \n" + JSON.stringify(d));
                }
                hideAnimation();
                //$("#output").html(JSON.stringify(d));
            })
            .fail(function(jqXHR, textStatus, errorThrown){
                alert("Failed to Reload Data.\nError:" + errorThrown);  //<-- Trap and alert of any errors if they occurred
                hideAnimation();
            })
            .always(function(){
                clearInterval(myInterval);
            })
            ; //----- End of Ajax Call
        });

        //-------------------------- MODAL EVENTS --------------------------------
        // Initalize modal dialog
        // attach modal-container bootstrap attributes to links with .modal-link class.
        // when a link is clicked with these attributes, bootstrap will display the href content in a modal dialog.
        $('body').on('click', '.modal-link', function (e) {
            e.preventDefault();
            $(this).attr('data-target', '#modal-container');
            $(this).attr('data-toggle', 'modal');
        });
        // Attach listener to .modal-close-btn's so that when the button is pressed the modal dialog disappears
        $('body').on('click', '.modal-close-btn', function () {
            $('#modal-container').modal('hide');
        });
        //clear modal cache, so that new content can be loaded
        $('#modal-container').on('hidden.bs.modal', function () {
            $(this).removeData('bs.modal');
        });

        $('#CancelModal').on('click', function () {
            return false;
        });
        //----------------- END OF MODAL EVENTS ----------------------------------
    });


    //----------------------------- FUNCTIONS --------------------------------------------------------
    //------------------------------------------------------------------------------------------------
    function hideAnimation(){
        //Hide the "loading" animation and show all data elements once Ajax call completes
        $("#sectionWait").hide();
        $("#sectionButtons").show();
        $("#sectionBuildings").show();
    };

    function saveMetricData(doClose){
        //alert("Saving Data...");
        //var payload1 = '{"metricdetail":{"mtrc_period_id":"1","mtrc_name":"Net FTE","mtrc_id":"3","mtrc_period_name":"Monthly Net FTE","tpt_name":"Month","tm_per_start_dtm":"2016-06-01 00:00:00.0","tm_per_end_dtm":"2016-06-30 23:59:59.0","prod_name":"Red Zone","data_type_token":"dec","data_type_num_yn":"Y"},"locationdetails":[{ "dsc_mtrc_lc_bldg_name": "Allentown 2","dsc_mtrc_lc_bldg_id": "2","bmp_is_editable_yn": "Y","bmp_is_manual_yn": "Y","mtrc_period_val_id": "122","mtrc_period_val_value": "TEST123"}]} ';
        var payload = buildJSON();
        //alert("Posting Data: \n" + payload);
        var saveClose = !doClose;
        if (doClose){
            if(confirm("Are you sure you want to close the current Metric Period?")){
                saveClose = canBeClosed();
            }
            else return;
        }

        if (saveClose){
            $.ajax({
                url: '/Metric/saveRZMetric',
                //url: 'http://dscapidev/dscmtrc/api/v1/metric/metricperiodsave',
                method: "POST",
                cache: false,
                //type: "POST",
                //data: payload,
                data: {raw_json:payload},
                //contentType: "application/json; charset=utf-8",
                //dataType: "json",
                error: function (jqXHR, textStatus, errorThrown) {
                    alert("Failed to Save Data. Ajax Failed!!\nError:" + textStatus + "," + errorThrown);  //<-- Trap and alert of any errors if they occurred
                }
            }).done(function (d) {
                if (d == "Success") {
                    @*var urlSufixx = "@Model.id?month=@curMonth&year=@curYear";*@
                    //alert("Navigating to: /Metric/EditView/" + urlSufixx);
                    if (doClose){
                        closePeriod();
                        alert("Metric Period Saved and Closed Successfully!");
                        location.reload();
                    }
                    else{
                        //$("#frmModified").val("N");
                        //$("#btnSave").prop('disabled', true);
                        //$("#divMsg").show().fadeOut(3000);
                        
                        //alert("Data Saved Successfully!");
                        //location.href = "/Metric/EditView/" + urlSufixx;
                        location.reload();  //If we are not doing a close, just reload the page
                    }                    
                } else {
                    alert("Error Saving the data!\n" + JSON.stringify(d));
                }
                //$("#output").html(JSON.stringify(d));
            });
        }
    }

    function closePeriod(){
        $.ajax({
            //url: '@Url.Action("closeRZMetricPeriod", "Metric")',
            url: '/Metric/closeRZMetricPeriod',
            method: "POST",
            cache: false,
            data: { metricId: "@Model.id", metricMonth:"@curMonth", metricYear:"@curYear", metricPeriodId:"@Model.metricPeriodID" },
            error: function () {
                alert("Failed to Close Period.");  //<-- Trap and alert of any errors if they occurred
            }
        }).done(function (d) {
            if (d == "Success") {
                alert("Period Successfully Closed!");
                var urlSufixx = "@Model.id?month=@curMonth&year=@curYear";
                //alert("Navigating to: /Metric/EditView/" + urlSufixx);
                location.href = "/Metric/EditView/" + urlSufixx;
            }
            else {alert("ERROR Closing Period: " + d); }
        });
    }

    function canBeClosed(){
        //alert("Checking if Metric Can be closed...");
        var errorsFound = 0;
        //Check the Read Only fields (For the automated metric values)
        $(".ROField").each(function(){
            var $txtControl = $(this);
            var isNAallowed = $txtControl.parents(".bldngRow").find("#isNAallowed").first().val();
            var valControl = $(this).parents(".bldngRow").first().find(".valValidationMsg").first();
            var valMessage = "";

            //Remove the readonly property of the control since we will be manipulating it's value
            $txtControl.attr("readonly", false);

            if ($txtControl.val() == "" ){ //No values can be left blank
                //alert("Value null was found.");
                if(isNAallowed=="True"){ valMessage = "Value or 'N/A' is required";  }
                else {  valMessage = "Valid value required ('N/A' not allowed) ";  }
            }
            else {
                valMessage = validateTxtField($(this));
            }

            if(!(valMessage == "PASS")){ //Validation Failed
                errorsFound = errorsFound + 1;
                $txtControl.removeClass("no-error");
                $txtControl.addClass("error");
                valControl.html(valMessage);
                valControl.show();
            }
            $("#btnSave").prop('disabled', true);  //Always disable save button

            //Reenable the read only property of the control
            $txtControl.attr("readonly", true);
        });

        // Verify the Data values of each of the input Fields
        $(".updateField").each(function(){
            var $txtControl = $(this);
            var isNAallowed = $txtControl.parents(".bldngRow").find("#isNAallowed").first().val();
            var valControl = $(this).parents(".bldngRow").first().find(".valValidationMsg").first();
            var valMessage = "";
            if ($txtControl.val() == "" ){ //No values can be left blank
                //alert("Value null was found.");
                //valMessage = "Value is required";
                if(isNAallowed=="True"){ valMessage = "Value or 'N/A' is required";  }
                else {  valMessage = "Valid value required ('N/A' not allowed) ";  }
            }
            else {
                valMessage = validateTxtField($(this));
            }

            if(!(valMessage == "PASS")){ //Validation Failed
                errorsFound = errorsFound + 1;
                $txtControl.removeClass("no-error");
                $txtControl.addClass("error");
                valControl.html(valMessage);
                valControl.show();
                $("#btnSave").prop('disabled', true);
                $txtControl.focus();
            }
        });
        if(errorsFound > 0){
            $("#messageLine").html('<span style="margin-right:10px">FAILED TO CLOSE:</span>' + errorsFound + ' error(s) need to be corrected before closing.');
            $("#messageLine").show();
            //alert("Warning! " + errorsFound + " error(s) need to be corrected before closing.");
            return false;
        }
        else {
            $("#messageLine").hide();
            //alert("Closing");
            return true;
        }
    }

    //------------------------------------------------------------------------------------------------
    function buildJSON() {
        @*var periodId = @Model.metricPeriodID*@

        var jsonPayloadHeader = '{"metricdetail":{"mtrc_period_id":"@Model.metricPeriodID","mtrc_name":"@Model.metricName","mtrc_id":"@Model.id","mtrc_period_name":"@Model.periodName.Replace("Metric Information", "")","tpt_name":"@Model.period_Type","tm_per_start_dtm":"@Model.metric_period_start_date.ToString("yyyy-MM-dd HH:mm:ss")","tm_per_end_dtm":"@Model.metric_period_end_date.ToString("yyyy-MM-dd HH:mm:ss")","prod_name":"Red Zone","data_type_token":"@Model.metricDataType","data_type_num_yn":"Y"},';
        var jsonPayloadDetail = '"locationdetails":[';
        //Loop thorugh all building and build a location Detail JSON payload for each bnuilding that was edited
        var recordsChanged = 0;
        $(".bldngRow").each(function () {
            // Loop thoruh all building rows
            //alert("Building is "+$(this).find("#buildingName").first().val()+" and flag is "+$(this).find("#saveFlag").first().val());
            var canUseNA = "";
            if ($(this).find("#isNAallowed").first().val() == "True"){ canUseNA = "Y"}
            else {canUseNA = "N"}
            if ($(this).find("#saveFlag").first().val() == "Y") {//If this Building Value was Edited add it to the payload
                if (recordsChanged > 0) { jsonPayloadDetail = jsonPayloadDetail + ","; }
                jsonPayloadDetail = jsonPayloadDetail + '{ "dsc_mtrc_lc_bldg_name": "' + $(this).find("#buildingName").first().val() + '","dsc_mtrc_lc_bldg_id": "' + $(this).find("#buildingId").first().val() + '","UserId": "@User.Identity.Name","bmp_is_editable_yn": "Y","bmp_is_manual_yn": "Y","bmp_na_allow_yn": "' + canUseNA + '", "mtrc_period_val_id": "' + $(this).find("#periodValId").first().val() + '","mtrc_period_val_value": "' + $(this).find("#newMetricVal").first().val() + '","mtrc_period_val_is_na_yn": "' + $(this).find("#isNA").first().val()  + '"}';

                recordsChanged = recordsChanged + 1;
            }
        });

        //alert( recordsChanged + " building were Updated.");
        jsonPayloadDetail = jsonPayloadDetail + ']}';
        //alert("Jason submitted:\n" + jsonPayloadDetail);
        return jsonPayloadHeader + jsonPayloadDetail
    }
    //------------------------------------------------------------------------------------------------
    function validateNumEntry(txtControl, dataType, minVal, maxVal, decPlaces ) {
        // First Validation. If input values is null or empty. It passes
        if (txtControl.val() == "") return "PASS";

        var txtValue = txtControl.val();
        var validationMessage = "PASS";
        var inputIntValue = Number(txtValue);
        var minRange = Number(minVal);
        var maxRange = Number(maxVal);

        //Second Validation, make sure that the input value is a number.
        if (isNaN(inputIntValue)) {  // Value is not a number
            return "Value must be numeric";
        }

        if (dataType == "int")
        {// Integer Value cannot have decimal values
            if (txtValue.indexOf(".") >= 0) {
                validationMessage =  "Value must not contain decimals";
            }
        }else
            if (dataType == "dec") {
                //There is no custom validation for now
            }else
                if (dataType == "cur") {
                    //There is no custom validation for now
                }else
                    if (dataType == "pct") {
                        //There is no custom validation for now
                    }

        //Round value off to the requiered number of decimal places for all non integer values
        if (dataType != "int"){
            //parseFloat(txtValue).toFixed(2);
            txtControl.val(inputIntValue.toFixed(Number(decPlaces)) );
        }

        //Check Min and Max for all data types
        if ( inputIntValue < minRange || inputIntValue > maxRange) {
            validationMessage =  "Value must be between " + minVal + " and " + maxRange;
        }

        return validationMessage;
    }
    //------------------------------------------------------------------------------------------------
    function validateStrEntry(txtValue, strLength) {
        var stringLength = Number(strLength);
        if ( stringLength == 0 || isNaN(stringLength)) {
            //alert("Length is not a number");
            //The Length is undefined. We will assume that any lenght is valid
            return "PASS"
        }
        if (txtValue.length < Number(strLength)) {
            return "PASS";
        }
        return "The Value '" + txtValue + "' Exceeds the maximum length of " + strLength;
    }
    //------------------------------------------------------------------------------------------------
    function validateTxtField($txtControl){
        var oldValue = $txtControl.val();
        var newValue = $txtControl.val().trim();
        var isNAallowed = $txtControl.parents(".bldngRow").find("#isNAallowed").first().val();

        //Validate the Entered Value
        //$(this)

        var valMessage = "";

        //First Check if the Value entered is N/A. If so and "N/A" is acceptable then the validation passed without further validation
        if ((newValue.toLocaleUpperCase() == "NA" || newValue.toLocaleUpperCase() == "N/A") && isNAallowed == "True") {
            newValue = "N/A";
            valMessage = "PASS";
            $txtControl.parents(".bldngRow").find("#isNA").first().val("Y");
        }
        else {
            //Perform either the Numeric or the String Validations
            if ("@Model.isNumeric" == "True") {
                //Validate the input as a number
                valMessage = validateNumEntry($txtControl, "@Model.metricDataType", "@Model.mtrcMinVal", "@Model.mtrcMaxVal", @Model.maxDecPlaces);
                //alert("result: " + valMessage);
            }
            else {
                //Perform the String Validation
                valMessage = validateStrEntry(newValue, "@Model.maxStrSize" );
            }
            //Check the result of the validation
            $txtControl.parents(".bldngRow").find("#isNA").first().val("N");
        }

        if (valMessage == "PASS" && !(oldValue == newValue)) {
            //If the value was altered/changed in any way, update with new value and set appropiate flags
            $txtControl.val(newValue);      //Update the text field with the new value if they are not equal.
            $txtControl.parents(".bldngRow").find("#saveFlag").first().val("Y");
            $("#frmModified").val("Y");
            $("#btnSave").prop('disabled', false);
        }

        return valMessage;
    }
</script>
