@model IEnumerable<REDZONE.Models.MPReason>

@{
    ViewBag.Title = "Assigment";
}
<style>
    .headerCell {
        border: 1px solid black;
        padding:5px;
    }

    th {
        text-align: center;
    }

    .boxComment {
        margin:0 auto; 
        margin-bottom:7px; 
        max-width:400px; 
    }
    .rCommentBox {
        -moz-appearance: textfield-multiline;
        -webkit-appearance: textarea;
        border: 1px solid gray;
        font: medium -moz-fixed;
        font: -webkit-small-control;
        overflow: auto;
        margin:0; 
        font-weight:bold;
        max-width:375px;
        padding:5px;
        min-height:50px;
        border-radius:5px;
        text-align:left;
    }

    .reasonLabel {
        margin:0 auto;
        max-width: 400px;
        text-align:left;
        margin-bottom: 1px;
    }
/************* Check box control Styling**************/
    /* Hiding the checkbox, but allowing it to be focused */
.badgebox
{
    opacity: 0;
}

.badgebox + .badge
{
    /* Move the check mark away when unchecked */
    text-indent: -999999px;
    /* Makes the badge's width stay the same checked and unchecked */
	width: 27px;
}

.badgebox:focus + .badge
{
    /* Set something to make the badge looks focused */
    /* This really depends on the application, in my case it was: */
    
    /* Adding a light border */
    box-shadow: inset 0px 0px 5px;
    /* Taking the difference out of the padding */
}

.badgebox:checked + .badge
{
    /* Move the check mark back when checked */
	text-indent: 0;
    color:darkgreen;
    font-size:16px;
}
.reasonCkBox {
    background-color: #365f97;
    width:375px; 
    text-align:left;
    margin-bottom:1px
 }
/************* End of Check box control Styling**************/

</style>

<div>
    <input type="hidden" id="newReasonCounter" value="0"/>
</div>

<div class="panel panel-info" style="margin-top:5px; font-family:Arial">
    <div class="panel-heading">
        <span style="font-weight:bold; font-size:20px">Red Zone Metric Reason Assignment</span><br />
        <span style="font-weight:bold; color: black" id="buildingName"></span>&nbsp;-&nbsp;
        <span style="font-weight:bold; color: black" id="metricDate"></span>
    </div>
    <div class="panel-body">
        <div style="margin:0 auto; text-align:center">
            <!-- Metric Period Header Information  -->
            <div class="row" style="margin:0; font-weight:bold">
                <div class="col-xs-2 headerCell col-xs-offset-3" style="background-color:lightgray">Metric</div>
                <div class="col-xs-2 headerCell" style="background-color:#bbedff">Goal</div>
                <div class="col-xs-2 headerCell" style="background-color:lightgray"><span id="metricDate1"></span></div>
            </div>
            <div class="row" style="margin:0">
                <div class="col-xs-2 col-xs-offset-3 headerCell" style="background-color:lightgray"><span id="mNameCell"></span></div>
                <div class="col-xs-2 headerCell" style="background-color:#bbedff"><span id="mGoalCell"></span></div>
                <div class="col-xs-2 headerCell" id="mValueCell" style="font-weight:normal"></div>
            </div>
        </div> <!-- END OF HEADER INFORMATION-->
        <br />
        <!-- **************** START OF THE ASSIGNED REASONS LIST ******************* -->
        @if (Model.Count() == 0) { 
        <div style="color:red; padding:20px; border: 4px double black; border-radius:7px; max-width:900px; margin:0 auto">THERE ARE NO ASSIGNED REASONS FOR THIS METRIC ENTRY</div>
        }
        else
        {
            <div id="reasonListSection">
                <div class="alert-success" style="font-size:18px; font-family:bold; margin-bottom:10px; padding:5px">Available Reasons for Metric</div>



                <div class="row " style="text-align: center">
                 @{ int ckBoxCounter = 0;
                    string commentStatus = "display: none";
                 }
                 @foreach (var item in Model)
                 {
                    if (item.reason_std_yn.Equals("Y") || item.isAssigned)
                    {
                       // Only Show the reason code if it's a Standard Reason or it it is Assigned
                       string ckStatus = "";
                       if (item.isAssigned) { ckStatus = "checked"; }
                        <div class="reasonDiv" id="parent_@ckBoxCounter">
                            <div class="row reasonLabel">
                                <label for="primary-@ckBoxCounter" class="btn btn-info reasonCkBox" title="@item.reason_description">
                                    <input type="checkbox" id="primary-@ckBoxCounter" class="badgebox" @ckStatus>
                                    <span class="badge">&check;</span><span style="margin-left: 8px">@item.reason_text</span>
                                </label>
                                <span style="font-size:8px; color:blue">*STD</span>
                            </div>
                            @*Comment box for each Reason displayed*@
                            @if (!String.IsNullOrEmpty(item.mpvr_Comment)) { commentStatus = ""; }
                            else { commentStatus = "display: none"; }
                            <div class="row boxComment" style="@commentStatus">
                                <div class="rCommentBox" contenteditable="true">
                                    <span class="cmLabel" style="color:darkgray;" >Comment: </span> @item.mpvr_Comment
                                </div>
                            </div>
                        </div>
                       ckBoxCounter++;
                    }
                 }
                </div>





                <div class="row " style="text-align: center">
                    @*This Section Contains the dynamically added Reason Codes from the Drop Down*@
                    <div id="addedReasons" class="row " style="margin:0 auto; max-width: 400px; text-align:left; margin-bottom:3px">                        
                    </div>
                </div>
                <br />
                <div class="row " style="text-align: center">
                    <div class="row" style="margin:0 auto; max-width: 400px; text-align:left; margin-bottom:3px">

                        <!-- Non Standard Drop down button group -->
                        <div class="btn-group" >
                            <button class="btn btn-default btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" style="min-width:350px; font-size:14px">
                                [ Other Reason ... ] <span class="caret" style="float:right"></span>
                            </button>
                            <ul class="dropdown-menu" style="min-width:350px">
                                @foreach (var item in Model)
                                {
                                    if (!item.reason_std_yn.Equals("Y"))
                                    {
                                        // Only Show the reason codes that are not Standard (Stdr Codes are already Visible as check boxes)
                                        <li><a class="ddlReasonItem" id="li_@item.reason_id" href="#">@item.reason_text</a></li>
                                    }
                                }
                                <li role="separator" class="divider"></li>
                                <li><a id="selNewReason" href="#">[ - Add New Reason - ]</a></li>
                            </ul>
                        </div>



                        <select id="ddlReason" class="form-control" style="min-width:350px; color:white; background-color:#006981">
                            <option value="none">[ Other Reason ... ]</option>
                            @foreach (var item in Model)
                            {
                                if (!item.reason_std_yn.Equals("Y"))
                                {
                                    // Only Show the reason codes that are not Standard (Stdr Code are already Visible as check boxes)
                                    <option value="@item.reason_id">@item.reason_text</option>
                                }
                            }
                            <option value="new" style="font-weight:bold; margin-left:5px">[ - Add New Reason - ]</option>
                        </select>
                    </div>
                </div>
                <br /><br />
                <div class="row " style="text-align:center">
                    <button id="btnSaveProg" class="btn btn-primary" style="width:140px; ">Save Progres</button>
                    <button id="btnBeginAction" class="btn btn-primary" style="width:140px; margin-left:20px">Begin Action Plan</button>
                </div>
            </div>
        }

    </div>
</div>


<div id="addReasonForm" class="modal fade" role="dialog">
    <div class="modal-dialog" style="width:30%; min-width:400px">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title add-reason">Add Reason</h4>
            </div>
            <div class="modal-body" id="reasonEditBody">

                <div class="row" style="margin-top:5px;">
                    <div class="col-xs-12" style="text-align: center">
                        <div class="input-group">
                            <span class="input-group-addon" id="basic-addon1">Reason Text</span>
                            <input type="text" class="form-control" placeholder="[ Enter New Reason ]" aria-describedby="basic-addon1">
                        </div>                        
                    </div>
                </div>

            </div>
            <div class="modal-footer" id="reasonEditFooter">
                <input type="button" disabled class="btn btn-primary" id="btnAddReasonDetail" value="Add" />
                <button type="button" class="btn btn-primary" id="btnCancelReasonEdit" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>










<br /><br /><br /><br /><br />
<table class="table">
    <tr>
        <th>@Html.DisplayNameFor(model => model.reason_id)</th>
        <th>@Html.DisplayNameFor(model => model.metric_period_id)</th>
        <th>@Html.DisplayNameFor(model => model.reason_text)</th>
        <th>@Html.DisplayNameFor(model => model.reason_order)</th>
        <th>@Html.DisplayNameFor(model => model.reason_description)</th>
        <th>@Html.DisplayNameFor(model => model.reason_std_yn)</th>
        <th>@Html.DisplayNameFor(model => model.isAssigned)</th>
        <th>Metrics Using it</th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>@Html.DisplayFor(modelItem => item.reason_id)</td>
            <td>@Html.DisplayFor(modelItem => item.metric_period_id)</td>
            <td>@Html.DisplayFor(modelItem => item.reason_text)</td>
            <td>@Html.DisplayFor(modelItem => item.reason_order)</td>
            <td>@Html.DisplayFor(modelItem => item.reason_description)</td>
            <td>@Html.DisplayFor(modelItem => item.reason_std_yn)</td>
            <td>@Html.DisplayFor(modelItem => item.isAssigned)</td>
            <td>@Html.DisplayFor(modelItem => item.times_used)</td>            
        </tr>
    }
</table>










<script>
    function getMPid() { return localStorage.getItem("mpId"); }
    function getBuildingName() { return localStorage.getItem("mpBuildingName"); }
    function getMetricName() { return localStorage.getItem("mpName"); }
    function getMetricGoal() { return localStorage.getItem("mpGoal"); }
    function getMPvalueId() { return localStorage.getItem("mpValueId"); }
    function getMPvalue() { return localStorage.getItem("mpValue"); }
    function getMPvalueDisplayClass() { return localStorage.getItem("mpValueDisplayClass"); }
    function getMetricDate() { return localStorage.getItem("mpValueDate"); }

    function resetMetricValueVariables() {
        localStorage.setItem("mpId", "");
        localStorage.setItem("mpBuildingName", "");
        localStorage.setItem("mpName", "");
        localStorage.setItem("mpGoal", "");
        localStorage.setItem("mpValueId", "");
        localStorage.setItem("mpValue", "");
        localStorage.setItem("mpValueDisplayClass", "");
        localStorage.setItem("mpValueDate", "");
    }

    $(document).ready(function () {
        var newReasonTag = '<div class="reasonDiv"><div class="row reasonLabel"><label for="dynamic-ABC" class="btn btn-info reasonCkBox" >' +
                '<input type="checkbox" id="dynamic-ABC" class="badgebox" checked><span class="badge">&check;</span>' +
                '<span style="margin-left: 8px">' + 'XYZ</span></label>' + 
                '<div class="row boxComment"><div class="rCommentBox" contenteditable="true"><span class="cmLabel" style="color:darkgray;" >Comment: </span></div></div></div>' +
                '</div>';



        $("#buildingName").html(getBuildingName());
        $("#metricDate").html(getMetricDate());
        $("#metricDate1").html(getMetricDate());
        $("#mValueCell").addClass(getMPvalueDisplayClass());
        $("#mNameCell").html(getMetricName());
        $("#mGoalCell").html(getMetricGoal());
        $("#mValueCell").html(getMPvalue());

        //alert("Addign class: " + getMPvalueDisplayClass());
        //resetMetricValueVariables(); After document has loaded we do not need to keep the variables cached in local Storage
        $("#ddlReason").on("change", function () {            
            var reasonId = $(this).val();
            var reasonText = $(this).find('option:selected').text();
            if (reasonId == "none") {
                alert("You requested to do nothing.. :)");
            }
            else if (reasonId == "new") {
                $('#addReasonForm').modal('show');
            }
            else {
                //Adds selected Option to the Check List
                var lastDynamicIndex = parseInt($('#newReasonCounter').val()) + 1;
                dynamicReasonTag = newReasonTag.replace("XYZ", reasonText).replace("ABC", lastDynamicIndex).replace("ABC", lastDynamicIndex);
                $('#addedReasons').append(dynamicReasonTag);
                $('#newReasonCounter').val(lastDynamicIndex);     //Update the Hidden Field that holds the last Index used
                //Reset the select list index
                $(this).prop('selectedIndex', 0);
                $('#addedReasons').focus();
            }
            //alert("Drop Down Selection was changed:\nReason Id is: " + reasonId + "\nText: " + reasonText);
        });
        $('#btnSaveProg').click(function () {
            alert("Progress Saved Successfully");
        });
        $('#btnBeginAction').click(function () {
            alert("New Action Plan Actions are not enabled yet");
        });

        $('#reasonListSection').on('change', '.badgebox', function () {
            var $parentDiv = $(this).parents(".reasonDiv").first();
            var $thisComment = $parentDiv.find(".boxComment").first();
            //alert("Parent Div id is:" + $(this).parents(".reasonDiv").first().prop("id"));
            //alert("This Id is: " + $(this).prop("id") + "\nParent Div id is: " + $(this).parents().find(".reasonDiv").first().prop("id"));
            //alert("Parent Id is: " + $(this).parents().find(".reasonDiv").first().prop("id"));
            if ($(this).prop("checked")) {
                // If it gets Checked Add the comment box
                $thisComment.show();

            }
            else { //Hide the comment box
                $thisComment.hide();
            }
            //   alert("Checked is: " + $(this).prop("checked"));

        });
        $('#reasonListSection').on('focus', '.rCommentBox', function () {
            $(this).find(".cmLabel").remove();
        });
        $('#reasonListSection').on('focusout', '.rCommentBox', function () {
            $(this).prepend('<span class="cmLabel" style="color:darkgray;" >Comment: </span>');
        });

        $('.ddlReasonItem').click(function () {
            var reasonId = $(this).prop("id").replace("li_", "");
            var reasonText = $(this).html();
            var lastDynamicIndex = parseInt($('#newReasonCounter').val()) + 1;

            //alert("Action Selected! Id: " + reasonId + "\nSelection Text: " + reasonText + "\nLast Dynamic element Index is: " + lastDynamicIndex);

            //Adds selected Option to the Check List
            dynamicReasonTag = newReasonTag.replace("XYZ", reasonText).replace("ABC", lastDynamicIndex).replace("ABC", lastDynamicIndex);
            $('#addedReasons').append(dynamicReasonTag);
            $('#newReasonCounter').val(lastDynamicIndex);     //Update the Hidden Field that holds the last Index used
            //Reset the select list index
            $('#addedReasons').focus();

        });

        $('#selNewReason').click(function () {
            $('#addReasonForm').modal('show');
        });
    });
</script>