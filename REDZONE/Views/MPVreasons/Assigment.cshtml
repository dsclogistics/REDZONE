@model IEnumerable<REDZONE.Models.MPReason>
@{ ViewBag.Title = "Assigment";  }
@{
    string noDataClass = (Model.Count() > 0) ? "display:none;" : "";
}
<style>
    .headerCell {
            border: 1px solid black;
            padding: 5px;
        }

    th {
            text-align: center;
        }
    .rCommentBox {
            -moz-appearance: textfield-multiline;
            -webkit-appearance: textarea;
            border: 1px solid lightgray;
            font: medium -moz-fixed;
            font: -webkit-small-control;
            overflow: auto;
            max-width: 480px;
            padding: 5px;
            min-height: 50px;
            border-radius: 5px;
            text-align: left;
            margin: 0 auto;
            margin-top:0px;
            margin-left:68px;
            margin-bottom: 0px;
            margin-right: 5px;
            overflow-x: hidden;
            text-wrap: normal;
            box-shadow: inset 0px 0px 3px;

            width:480px;
            color:slategray;
        }
    .reasonLabel {
            margin: 0 auto;
            max-width: 400px;
            text-align: left;
            margin-bottom: 1px;
            padding: 0;
        }
    .modal-header {
            background-color: #2052a3;
            color: white;
            font-weight: bold;
        }
    .hasError {
            border-color: red;
            background-color: #feb9b9;
        }
    .noData {
            color: red;
            padding: 40px 10px;
            border: 4px double black;
            border-radius: 7px;
            max-width: 900px;
            margin: 0 auto;
            margin-top: 40px;
            margin-bottom: 40px;
            font-size: 18px;
        }
    #nonStdrReasonsDiv, #nonStdrReasonsDivAdded, #nonStdRsnDropDown, #standardReasonsDiv {
            margin: 0 auto;
            max-width: 550px;
            text-align: left;
            margin-bottom: 3px;
            padding: 0px;
        }
    .padding2 {
            padding: 2px;
        }

    /******* THIS 'badgebox' CSS STYLE IS NO LONGER USED - LEFT FOR REFERENCE ONLY ***********/
    /***************** Check box control Styling ****************************/
    /********** Hiding the checkbox, but allowing it to be focused **********/
    .badgebox {
        opacity: 0;
    }
    .badgebox + .badge {
                text-indent: -999999px; /* Move the check mark away when unchecked */
                width: 27px; /* Makes the badge's width stay the same checked and unchecked */
                border-radius: 3px; /*Make the badge Look like square checkbox*/
                border: 1px solid darkgray;
                height: 25px;
                background-color: white;
        }
    .badgebox:focus + .badge {
                /* Set something to make the badge looks focused */
                /* This really depends on the application, in my case it was: */
                /* Adding a light border */
                box-shadow: inset 0px 0px 5px;
                /* Taking the difference out of the padding */
            }
    .badgebox:checked + .badge {
                /* Move the check mark back when checked */
                text-indent: 0;
                color: darkblue;
                font-size: 16px;
                background-color: #f9fff0;
            }
    .reasonCkControl {
            /*background-color: #365f97;*/
            background-color: #f9f9f9;
            color: black;
            font-weight: bold;
            width: 100%;
            text-align: left;
            margin-bottom: 4px;
        }
    /************* End of Check box control Styling*********************************/

    /**************** Drop Down With Checkbox control Styling***************************/
    /******  Hiding the checkbox attached to DDL, but allowing it to be focused ********/
    .form-group input[type="checkbox"] {
        display: none;
    }
    .form-group input[type="checkbox"] + .btn-group > label:first-child span {
        width: 23px;
        height: 22px;
        border: 1px solid lightgray;
        border-radius: 3px;
        /*padding-left:10px;*/
     }
    .form-group input[type="checkbox"] + .btn-group > label:first-child {
        height: 34px;
        padding: 5px 10px;
    }
    /********************* End of Check box control Styling *********************************/
    /*.blueHdr {
            font-family:Arial;
            background-image: -webkit-linear-gradient(top, #d9edf7 0%, #c4e3f3 100%);
            background-image:      -o-linear-gradient(top, #d9edf7 0%, #c4e3f3 100%);
            background-image: -webkit-gradient(linear, left top, left bottom, from(#d9edf7), to(#c4e3f3));
            background-image:         linear-gradient(to bottom, #d9edf7 0%, #c4e3f3 100%);
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffd9edf7', endColorstr='#ffc4e3f3', GradientType=0);
            background-repeat: repeat-x;
        }*/
    .mpvReason {
            margin:0;
            padding:0px;
            width:100%;
            margin-bottom:5px;
        }
    .assignTitle{
        border: 2px solid black;
        border-radius:4px;
        background-color:#f7f7f7; 
        margin:0 auto; 
        font-size:18px; 
        font-weight:bold;
        margin-top:10px; 
        margin-bottom:10px; 
        padding:3px;
        max-width: 850px;
    }
    /*#reasonListSection .dropdown-toggle {
        text-shadow: 0 1px 0 #fff;
        background-image: -webkit-linear-gradient(top, #fff 0%, #e0e0e0 100%);
        background-image:      -o-linear-gradient(top, #fff 0%, #e0e0e0 100%);
        background-image: -webkit-gradient(linear, left top, left bottom, from(#fff), to(#e0e0e0));
        background-image:         linear-gradient(to bottom, #fff 0%, #e0e0e0 100%);
        filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffffff', endColorstr='#ffe0e0e0', GradientType=0);
        filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);
        background-repeat: repeat-x;
        border-color: #dbdbdb;
        border-color: #ccc;
        color: black;
    }
    #reasonListSection .dropdown-toggle:hover {
        background-color: #e0e0e0;
        background-position: 0 -15px;
    }*/
</style>
<script src="~/Scripts/Assignment_Reason.js"></script>

<div id="globalVariables">
    <input type="hidden" id="reloadAfterPopup" value="N" />
    <input type="hidden" id="urlReturn" value="@HttpUtility.HtmlDecode(ViewBag.ReturnUrl)" />
    <input type="hidden" id="ssoName" value="@User.Identity.Name" />
</div>

<div class="panel panel-default " style="margin-top:5px; font-family:Arial; ">
    <div class="panel-heading padding2">
        <span style="font-size:x-large; font-weight:bold; color:darkblue">Metric Reason Assignment</span><br />
        <span style="font-weight:bold; color: #525151; font-size:x-large; padding:0px" id="buildingName"></span>
        <span style="display:none">&nbsp;-&nbsp;</span>
        <span style="font-weight:bold; color: black; display:none" id="metricDate"></span>
    </div>
    <div class="panel-body padding2 ">
        <div style="margin:0 auto; text-align:center; margin-bottom:8px; margin-top:5px">
            <!-- Metric Period Header Information  -->
            <div class="row" style="margin:0; font-weight:bold">
                <div class="col-xs-2 headerCell col-xs-offset-3" style="background-color:#f0eaea">Metric</div>
                <div class="col-xs-2 headerCell" style="background-color:#bbedff">Goal</div>
                <div class="col-xs-2 headerCell" style="background-color:#f0eaea"><span id="metricDate1"></span></div>
            </div>
            <div class="row" style="margin:0">
                <div class="col-xs-2 col-xs-offset-3 headerCell" style="background-color:#f0eaea"><span class="mNameCell"></span></div>
                <div class="col-xs-2 headerCell" style="background-color:#bbedff; color:blue; font-weight:bold;"><span id="mGoalCell"></span></div>
                <div class="col-xs-2 headerCell" id="mValueCell" style="font-weight:normal"></div>
            </div>
        </div> <!-- END OF HEADER INFORMATION-->

        <!-- **************** START OF THE REASONS LIST SECTION ******************* -->
        <div id="reasonListSection">
            <div class="assignTitle">
                Select Reasons for Metric Performance
            </div>
            <div class="noData" style="@noDataClass">There are no Reasons Defined for the '<span class="mNameCell"></span>' Metric </div>

            @* ---------------- This section contains all STANDARD REASONS that are currently selected in the model---------*@
            <div class="row " id="standardReasonsDiv" style="text-align: center">
                @{ int ckBoxCounter = 0;
                 string commentStatus = "display: none";
                }
                @foreach (var item in Model)
                {
                    if (item.reason_std_yn.Equals("Y"))
                    {
                        // Only Show the reason code if it's a Standard Reason //or it it is Assigned
                        string ckStatus = "";
                        if (item.isAssigned)
                        {
                            ckStatus = "checked";
                            commentStatus = "";
                        }
                        else { commentStatus = "display: none"; }


                        //if (!String.IsNullOrEmpty(item.mpvr_Comment)) { commentStatus = ""; }
                        //else { commentStatus = "display: none"; }

                        string checkDisplay = item.isAssigned ? "" : "display:none;";
                        string noCheckDisplay = item.isAssigned ? "display:none;" : "";

                        @*<div class="stdrReason mpvReason" id="parent_@ckBoxCounter">
                                <input type="hidden" id="wasUpdated" value="N" />
                                <input type="hidden" id="origSts" value="@ckStatus" />
                                <input type="hidden" id="reasonId" value="@item.reason_id" />
                                <input type="hidden" id="valueReasonId" value="@item.val_reason_id" />

                                <div class="row reasonLabel">
                                    <label for="primary-@ckBoxCounter" class="btn btn-default reasonCkControl" title="@item.reason_description">
                                        <input type="checkbox" id="primary-@ckBoxCounter" class="badgebox rsCheckBox" @ckStatus>
                                        <span class="badge">&check;</span>
                                        <span style="margin-left: 10px">@item.reason_text</span>
                                        <br />
                                        <span class="rCommentBox" contenteditable="true" style="color:slategray; @commentStatus">
                                            <span class="cmLabel" style="color:darkgray;">Comment: </span>
                                            @item.mpvr_Comment
                                        </span>
                                    </label>
                                </div>
                            </div>*@

                        <div id="parent_@ckBoxCounter" class="stdrReason mpvReason" style="">
                            <input type="hidden" id="wasUpdated" value="N" />
                            <input type="hidden" id="origSts" value="@ckStatus" />
                            <input type="hidden" id="reasonId" value="@item.reason_id" />
                            <input type="hidden" id="valueReasonId" value="@item.val_reason_id" />

                            <div class="[ form-group ]" style="margin:0; padding:0px; width:100%">
                                <input id="primary-@ckBoxCounter" class="stdrCheckBox rsCheckBox" type="checkbox" name="primary-@ckBoxCounter" autocomplete="off" @ckStatus />
                                <div class="[ btn-group ]" style="width:100%">
                                    <label for="primary-@ckBoxCounter" class="[ btn btn-default ]" style="width:12.5%; min-width:45px">
                                        <span class="[ glyphicon glyphicon-ok ]" style="width:23px; box-shadow: inset 0px 0px 5px; @checkDisplay"></span>
                                        <span class="[ ghost ]" style="width: 23px; @noCheckDisplay"> &nbsp;&nbsp;&nbsp;</span>
                                    </label>
                                    <label for="primary-@ckBoxCounter" class="[ btn btn-primary dropdown-toggle btnText ]" style="width:87.5%; " aria-haspopup="true" aria-expanded="false">
                                        <span id="nsReasonText" style="float:left; @if (item.isAssigned){<text>font-weight:bold;</text>} ">@item.reason_text</span>
                                    </label>
                                    <span class="rCommentBox" contenteditable="true" style="@commentStatus ">
                                        <span class="cmLabel" style="color:darkgray; ">Comment: </span>
                                        @item.mpvr_Comment
                                    </span>
                                </div>


                            </div>
                        </div>

                        ckBoxCounter++;
                    }
                }
            </div>


            @* ------ This section contains all the ASSIGNED NON-STANDARD REASONS that are currently selected in the model---------*@
            <div id="nonStdrReasonsDiv" class="row ">
                @* -------- Display all No Standard Reason that are currently assigned-------- *@
                @{
                    int nsChkCounter = 0;
                    string nsListItems = "";
                    //Get a list of all the dropdown items
                    foreach (var nsItem in Model.Where(x => x.reason_std_yn != "Y").ToList())
                    {
                        string isVisible = nsItem.isAssigned ? "display:none" : "";
                        nsListItems += nsItem.reason_id + "," + nsItem.reason_text + "," + isVisible + ",false~";
                    }
                }
                @foreach (var nsAssignedItem in Model.Where(x => x.reason_std_yn != "Y" && x.isAssigned).ToList())
                { //loop through all Reason codes that are non-Standard
                    nsChkCounter++;
                    @Html.Action("_assignedNoStdrReason", "MPVreasons", new { nsChkNameIndex = nsChkCounter, reasonId = nsAssignedItem.reason_id, valRsnId = nsAssignedItem.val_reason_id, reasonText = nsAssignedItem.reason_text, reasonComment = nsAssignedItem.mpvr_Comment, wasUpdated = "N", ddItems = nsListItems })
                }
            </div>

            <div id="ddlWait" class="bordered" style="margin:0 auto; max-width: 400px;  padding:0px; display:none">
                <div style="margin-top:7px;">Please wait. Loading new element</div>
                <div style="padding:10px"><img src="~/Images/ui-anim_basic_16x16.gif" /></div>
            </div>

            @* ------ This section contains all the DYNAMICALLY ADDED NON-STANDARD REASONS from the drop Down Selection to be Assigned -----------------------*@
            <div id="nonStdrReasonsDivAdded" class="row ">
                @* *** Every Newly Added Reason must be assigned a dynamic:  nsChkName = "fancy-checkbox-default-New-" + uniqueCounter;****** *@
                @*  ---------- New control Items are populated Dynamically via call within this DIV section -------- *@
            </div>


            @* ------ This section contains a static Drop Down with all the non Standard reasons that can be Assigned to the Metric Period Value --------------*@
            <div id="nonStdRsnDropDown" class="row ">

                @Html.Action("_assignedNoStdrReason", "MPVreasons", new { nsChkNameIndex = "999", reasonId = "", valRsnId = "", reasonText = "[ Select Other Reason ]", reasonComment = "", wasUpdated = "N", ddItems = nsListItems })

            </div>


            <br /><br />
            <div class="row " style="text-align:center">
                <button id="btnSaveProg" class="btn btn-primary" style="width:135px; " disabled>Save Progress</button>
                <button id="btnBeginAction" class="btn btn-primary" style="width:135px; margin-left:20px; display:none">Begin Action Plan</button>
                <button id="btnCancelReasons" class="btn btn-warning" style="width:135px; margin-left:80px">Cancel</button>
            </div>
        </div>
        <!-- ****************************** END OF LIST OF REASONS SECTION ***************************************** -->
        <br />

    </div>
</div>

<div id="pageVariables">
    <input type="hidden" id="newReasonCounter" value="@nsChkCounter" />
    <input type="hidden" id="nsItemList" value="@nsListItems" />
    <input type="hidden" id="nsItemsToDelete" value="" />
</div>

<div id="addReasonForm" class="modal fade" role="dialog">
    <div class="modal-dialog" style="width:30%; min-width:400px">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title add-reason">Add Reason</h4>
            </div>
            <div class="modal-body" id="reasonEditBody">

                <div class="row" style="margin-top:70px; margin-bottom:70px; ">
                    <div class="col-xs-10 col-xs-offset-1" style="text-align: center">
                        <div class="input-group">
                            <span class="input-group-addon" id="basic-addon1" style="font-weight:bold">Reason Text</span>
                            <input id="inputReasonText" type="text" class="form-control" placeholder="[ Enter New Reason ]" aria-describedby="basic-addon1">
                        </div>
                    </div>
                </div>
                <div class="row alert-success" id="puSuccessMsg" style="margin:0 auto; padding:5px; display:none">Data Saved Successfully</div>
                <div class="row alert-danger" id="puErrorMsg" style="margin:0 auto; padding:5px; display:none"></div>
            </div>
            <div class="modal-footer" id="reasonEditFooter" style="text-align:center">
                <input type="button" disabled class="btn btn-primary" id="btnAddReasonDetail" value="Add" style="width:120px" />
                <button type="button" class="btn btn-primary" id="btnCancelReasonEdit" data-dismiss="modal" style="width:120px">Cancel</button>
            </div>
        </div>
    </div>
</div>




<div id="msgDiv"></div>


<br /><br /><br /><br /><br />
<table class="table" id="listTable" style="display:none">
    <tr>
        <th>@Html.DisplayNameFor(model => model.reason_id)</th>
        <th>@Html.DisplayNameFor(model => model.metric_period_id)</th>
        <th>@Html.DisplayNameFor(model => model.reason_text)</th>
        <th>@Html.DisplayNameFor(model => model.reason_order)</th>
        <th>@Html.DisplayNameFor(model => model.reason_description)</th>
        <th>@Html.DisplayNameFor(model => model.reason_std_yn)</th>
        <th>@Html.DisplayNameFor(model => model.isAssigned)</th>
        <th>Metrics Using it</th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>@Html.DisplayFor(modelItem => item.reason_id)</td>
            <td>@Html.DisplayFor(modelItem => item.metric_period_id)</td>
            <td>@Html.DisplayFor(modelItem => item.reason_text)</td>
            <td>@Html.DisplayFor(modelItem => item.reason_order)</td>
            <td>@Html.DisplayFor(modelItem => item.reason_description)</td>
            <td>@Html.DisplayFor(modelItem => item.reason_std_yn)</td>
            <td>@Html.DisplayFor(modelItem => item.isAssigned)</td>
            <td>@Html.DisplayFor(modelItem => item.times_used)</td>
        </tr>
    }
</table>
<br /><br /><br /><br />

<script>
    $(document).ready(function () {
        //var urlMsg = decodeURIComponent("(at)urlReturn");
        //alert("Return URL is: " + $('#urlReturn').val());


        //If the Status of the current Metric Period Value is "Not Started" (This display is part of the "Start Action Plan") Show the Start AP Button
        if (localStorage.getItem("mpvStatus") == "Not Started") {
            $('#btnBeginAction').show();
        }
        


    });

</script>