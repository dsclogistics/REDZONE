@model IEnumerable<REDZONE.Models.MPReason>

@{
    ViewBag.Title = "Assigment";
}
<style>
    .headerCell {
        border: 1px solid black;
        padding: 5px;
    }

    th {
        text-align: center;
    }

    .rCommentBox {
        -moz-appearance: textfield-multiline;
        -webkit-appearance: textarea;
        border: 1px solid lightgray;
        font: medium -moz-fixed;
        font: -webkit-small-control;
        overflow: auto;
        font-weight: bold;
        max-width: 375px;
        padding: 5px;
        min-height: 50px;
        border-radius: 5px;
        text-align: left;
        margin: 0 auto;
        width: 340px;
        margin-right: 5px;
        margin-top: 10px;
        margin-left: 15px;
        margin-bottom: 0px;
        overflow-x: hidden;
        text-wrap: normal;
        box-shadow: inset 0px 0px 3px;
    }

    .reasonLabel {
        margin: 0 auto;
        max-width: 400px;
        text-align: left;
        margin-bottom: 1px;
        padding:0;
    }

    .modal-header {
        background-color: #2052a3;
        color: white;
        font-weight: bold;
    }

    .hasError {
        border-color: red;
        background-color: #feb9b9;
    }

    .noData {
        color: red;
        padding: 40px 10px;
        border: 4px double black;
        border-radius: 7px;
        max-width: 900px;
        margin: 0 auto;
        margin-top: 40px;
        margin-bottom: 40px;
        font-size: 18px;
    }

    /************* Check box control Styling**************/
    /* Hiding the checkbox, but allowing it to be focused */
    .badgebox {
        opacity: 0;
    }
    
    .badgebox + .badge {
        text-indent: -999999px;  /* Move the check mark away when unchecked */
        width: 27px;             /* Makes the badge's width stay the same checked and unchecked */
        border-radius: 3px;      /*Make the badge Look like square checkbox*/
        border: 1px solid darkgray;
        height: 25px;
        background-color: white;
    }

    .badgebox:focus + .badge {
        /* Set something to make the badge looks focused */
        /* This really depends on the application, in my case it was: */
        /* Adding a light border */
        box-shadow: inset 0px 0px 5px;
        /* Taking the difference out of the padding */
    }

    .badgebox:checked + .badge {
        /* Move the check mark back when checked */
        text-indent: 0;
        color: darkblue;
        font-size: 16px;
        background-color: #f9fff0;
    }

    .reasonCkControl {
        /*background-color: #365f97;*/
        background-color: #f9f9f9;
        color: black;
        font-weight: bold;
        width: 100%;
        text-align: left;
        margin-bottom: 4px;
    }
    /************* End of Check box control Styling**************/

    .padding2 {
        padding: 2px;
    }
</style>

<div>
    <input type="hidden" id="newReasonCounter" value="0" />
    <input type="hidden" id="reloadAfterPopup" value="N" />
</div>

<div class="panel panel-info" style="margin-top:5px; font-family:Arial; ">
    <div class="panel-heading padding2">
        <span style="font-weight:bold; font-size:20px" id="showTable">Red Zone Metric Reason Assignment</span><br />
        <span style="font-weight:bold; color: black" id="buildingName"></span>&nbsp;-&nbsp;
        <span style="font-weight:bold; color: black" id="metricDate"></span>
    </div>
    <div class="panel-body padding2 ">
        <div style="margin:0 auto; text-align:center; margin-bottom:8px">
            <!-- Metric Period Header Information  -->
            <div class="row" style="margin:0; font-weight:bold">
                <div class="col-xs-2 headerCell col-xs-offset-3" style="background-color:lightgray">Metric</div>
                <div class="col-xs-2 headerCell" style="background-color:#bbedff">Goal</div>
                <div class="col-xs-2 headerCell" style="background-color:lightgray"><span id="metricDate1"></span></div>
            </div>
            <div class="row" style="margin:0">
                <div class="col-xs-2 col-xs-offset-3 headerCell" style="background-color:lightgray"><span class="mNameCell"></span></div>
                <div class="col-xs-2 headerCell" style="background-color:#bbedff"><span id="mGoalCell"></span></div>
                <div class="col-xs-2 headerCell" id="mValueCell" style="font-weight:normal"></div>
            </div>
        </div> <!-- END OF HEADER INFORMATION-->
        <!-- **************** START OF THE ASSIGNED REASONS LIST ******************* -->

        <div id="reasonListSection">
            <div class="alert-success " style="font-size:18px; font-family:bold; margin-bottom:10px; padding:3px">Available Reasons for Metric</div>
            <br />
            <div class="noData" style="display:none">There are no Reasons Defined for the '<span class="mNameCell"></span>' Metric </div>


            <div class="row " id="displayableReasons" style="text-align: center">
                @{ int ckBoxCounter = 0;
                 string commentStatus = "display: none";
                }
                @foreach (var item in Model)
                {
                    if (item.reason_std_yn.Equals("Y") || item.isAssigned)
                    {
                        // Only Show the reason code if it's a Standard Reason or it it is Assigned
                        string ckStatus = "";
                        if (item.isAssigned) { ckStatus = "checked"; }
                        if (!String.IsNullOrEmpty(item.mpvr_Comment)) { commentStatus = ""; }
                        else { commentStatus = "display: none"; }


                        <div class="reasonDiv" id="parent_@ckBoxCounter">
                            <input type="hidden" id="wasUpdated" value="N" />
                            <input type="hidden" id="origSts" value="@ckStatus" />
                            <input type="hidden" id="reasonId" value="@item.reason_id" />
                            <input type="hidden" id="valueReasonId" value="@item.val_reason_id" />
                            <div class="row reasonLabel">
                                <label for="primary-@ckBoxCounter" class="btn btn-default reasonCkControl" title="@item.reason_description">
                                    <input type="checkbox" id="primary-@ckBoxCounter" class="badgebox chkReason" @ckStatus>
                                    <span class="badge">&check;</span><span style="margin-left: 10px">@item.reason_text</span>
                                    @*@if (item.reason_std_yn.Equals("Y"))
                                        {
                                            <span style="float: right; color: lightblue; font-size: 10px">[Standard]</span>
                                        }*@
                                    <br />
                                    <span class="rCommentBox" contenteditable="true" style="@commentStatus">
                                        <span class="cmLabel" style="color:darkgray;">Comment: </span>
                                        @item.mpvr_Comment
                                    </span>
                                </label>
                            </div>
                            @*Comment box for each Reason displayed*@
                            @*<div class="row " style="@commentStatus">
                                    <div class="rCommentBox reasonComment" contenteditable="true">
                                        <span class="cmLabel" style="color:darkgray;">Comment: </span> @item.mpvr_Comment
                                    </div>
                                </div>*@
                        </div>
                        ckBoxCounter++;
                    }
                }
            </div>





            <div class="row " style="text-align: center">
                @*This Section Contains the dynamically added Reason Codes from the Drop Down*@
                <div id="addedReasons" class="row " style="margin:0 auto; max-width: 400px; text-align:left; margin-bottom:3px">
                </div>
            </div>
            <br />


            <div class="row " style="text-align: center">
                <div class="row" style="margin:0 auto; max-width: 400px; text-align:left; margin-bottom:3px">
                    <!--Drop down button group for non-Standard and not already assigned Reasons -->
                    @*<div class="btn-group dropup" style="margin-left: 10px">*@
                    <div class="btn-group " style="margin-left: 10px">
                        <button class="btn btn-default btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" style="min-width:360px; font-size:14px">
                            [ Select Other Reason ... ] <span class="caret" style="float:right"></span>
                        </button>
                        <ul id="reasonDropdown" class="dropdown-menu top" style="min-width:300px; border:4px double darkgray; margin-left:30px">
                            <li role="separator" class="divider" style="padding:0px"></li>
                            @foreach (var item in Model)
                            {
                                if ((!item.reason_std_yn.Equals("Y")) && (!item.isAssigned))
                                {
                                    // Only Show the reason codes that are not Standard (Stdr Codes are already Visible as check boxes)
                                    // Only show the reason codes that are not assigned (Assigned Reason are already visible next to the Standard reason section)
                                    <li style="padding:0px; "><a class="ddlReasonItem " id="li_@item.reason_id" style="padding:0px; margin-left:15px;" href="#">@item.reason_text</a></li>
                                }
                            }
                            <li role="separator" class="divider" style="padding:0px"></li>
                            <li><a id="selNewReason" style="font-weight:bold" href="#">[ - Add New Reason - ]</a></li>
                        </ul>
                    </div>
                </div>
            </div>
            <br /><br />
            <div class="row " style="text-align:center">
                <button id="btnSaveProg" class="btn btn-primary" style="width:135px; " disabled>Save Progres</button>
                <button id="btnBeginAction" class="btn btn-primary" style="width:135px; margin-left:20px">Begin Action Plan</button>
                <button id="btnCancelReasons" class="btn btn-warning" style="width:135px; margin-left:80px">Cancel</button>
            </div>
        </div>


    </div>
</div>


<div id="addReasonForm" class="modal fade" role="dialog">
    <div class="modal-dialog" style="width:30%; min-width:400px">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title add-reason">Add Reason</h4>
            </div>
            <div class="modal-body" id="reasonEditBody">

                <div class="row" style="margin-top:70px; margin-bottom:70px; ">
                    <div class="col-xs-10 col-xs-offset-1" style="text-align: center">
                        <div class="input-group">
                            <span class="input-group-addon" id="basic-addon1" style="font-weight:bold">Reason Text</span>
                            <input id="inputReasonText" type="text" class="form-control" placeholder="[ Enter New Reason ]" aria-describedby="basic-addon1">
                        </div>
                    </div>
                </div>
                <div class="row alert-success" id="puSuccessMsg" style="margin:0 auto; padding:5px; display:none">Data Saved Successfully</div>
            </div>
            <div class="modal-footer" id="reasonEditFooter" style="text-align:center">
                <input type="button" disabled class="btn btn-primary" id="btnAddReasonDetail" value="Add" style="width:120px" />
                <button type="button" class="btn btn-primary" id="btnCancelReasonEdit" data-dismiss="modal" style="width:120px">Cancel</button>
            </div>
        </div>
    </div>
</div>

<div id="msgForm" class="modal fade" role="dialog">
    <div class="modal-dialog" style="width:35%; min-width:400px">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title msgFormTitle">Operation Results</h4>
            </div>
            <div class="modal-body" id="msgFormBody">
                <div class="row" id="msgFormBodyData" style="margin-top:40px; margin-bottom:30px; ">
                </div>
            </div>
            <div class="modal-footer" id="msgFormFooter" style="text-align:center">
                <button type="button" class="btn btn-primary" id="btnCancelMsgForm" data-dismiss="modal" style="width:120px">DONE</button>
            </div>
        </div>
    </div>
</div>


<div id="msgDiv"></div>


<br /><br /><br /><br /><br />
<table class="table" id="listTable" style="display:none">
    <tr>
        <th>@Html.DisplayNameFor(model => model.reason_id)</th>
        <th>@Html.DisplayNameFor(model => model.metric_period_id)</th>
        <th>@Html.DisplayNameFor(model => model.reason_text)</th>
        <th>@Html.DisplayNameFor(model => model.reason_order)</th>
        <th>@Html.DisplayNameFor(model => model.reason_description)</th>
        <th>@Html.DisplayNameFor(model => model.reason_std_yn)</th>
        <th>@Html.DisplayNameFor(model => model.isAssigned)</th>
        <th>Metrics Using it</th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>@Html.DisplayFor(modelItem => item.reason_id)</td>
            <td>@Html.DisplayFor(modelItem => item.metric_period_id)</td>
            <td>@Html.DisplayFor(modelItem => item.reason_text)</td>
            <td>@Html.DisplayFor(modelItem => item.reason_order)</td>
            <td>@Html.DisplayFor(modelItem => item.reason_description)</td>
            <td>@Html.DisplayFor(modelItem => item.reason_std_yn)</td>
            <td>@Html.DisplayFor(modelItem => item.isAssigned)</td>
            <td>@Html.DisplayFor(modelItem => item.times_used)</td>
        </tr>
    }
</table>










<script>
    function getMPid() { return localStorage.getItem("mpId"); }
    function getBuildingName() { return localStorage.getItem("mpBuildingName"); }
    function getMetricName() { return localStorage.getItem("mpName"); }
    function getMetricGoal() { return localStorage.getItem("mpGoal"); }
    function getMPvalueId() { return localStorage.getItem("mpValueId"); }
    function getMPvalue() { return localStorage.getItem("mpValue"); }
    function getMPvalueDisplayClass() { return localStorage.getItem("mpValueDisplayClass"); }
    function getMetricDate() { return localStorage.getItem("mpValueDate"); }
    function resetMetricValueVariables() {
        localStorage.setItem("mpId", "");
        localStorage.setItem("mpBuildingName", "");
        localStorage.setItem("mpName", "");
        localStorage.setItem("mpGoal", "");
        localStorage.setItem("mpValueId", "");
        localStorage.setItem("mpValue", "");
        localStorage.setItem("mpValueDisplayClass", "");
        localStorage.setItem("mpValueDate", "");
    }

    $(document).ready(function () {
        //Global Variables
        var originalComment = "";
        
        $("#buildingName").html(getBuildingName());
        $("#metricDate").html(getMetricDate());
        $("#metricDate1").html(getMetricDate());
        $("#mValueCell").addClass(getMPvalueDisplayClass());
        $(".mNameCell").html(getMetricName());
        $("#mGoalCell").html(getMetricGoal());
        $("#mValueCell").html(getMPvalue());
        if ("@Model.Count()" == "0") { $('.noData').show(); }

        //alert("Addign class: " + getMPvalueDisplayClass());
        //resetMetricValueVariables(); After document has loaded we do not need to keep the variables cached in local Storage
        //============================ SAVE PROGRESS ACTION ====================================================
        $('#btnSaveProg').click(function () {
            $(this).prop("disabled", true);
            if (!getMPvalueId()) {
                alert("Warning!! Your session has timed out. Changes will not be saved.\nPlease logon again.");
            }
            else {
                // Do Saving procedure

            }

            //alert("Metric Period Value Id is: " + getMPvalueId() + " Vs " + getURLid());   //Both have the same values

            // This process will compile three lists that weill be submitted to the server via ajax for processing:
            // List 1: DELETE LIST - A list all reason codes currently assigned that need to be deleted
            // List 2: UPDATE LIST - A list of reason codes already assigned that need to be updated (New comment for example)
            // List 3: ASSIGN LIST - A list of reason codes that need to be assigned (Added)

            // Parameters that will be used for all three actions and for both static and dynamic reason sections
            var rMPValueId = getURLid();      //This is the Cell Value Id      //or  getMPvalueId() if we want to retrieve vlue from Local storage (Global value for all items);
            var rMPValueReasonId = "";       //For existing assigned Reasons (Delete/Update). New reasons do not have a Value Reason Id (Generated by DB after the insert)
            var rMPReasonId = "";
            var rMPValueReasonComment = "";
            var reasonsToDelete_List = "";
            var reasonsToUpdate_List = "";
            var reasonsToAdd_List = "";
            //var rMPValueReasonText = "";     (The reason text is not needed, API just needs the reason Id)

            // --- Loop through each reason (In the 'displayableReasons' DIV section) to compile the DELETE/ADD/Update lists ---
            //alert("Checking Existing Items");
            $('.reasonDiv').each(function () {
                var $curReason = $(this);

                //Check whether the item in question was changed. If not changed Skip it
                if ($curReason.find('#wasUpdated').val() == "Y") {
                    //Retrieve it's original status and variable values needed for add/update/delete
                    var originalSTatus = $curReason.find('#origSts').first().val();        //Either "checked" or ""
                    rMPValueReasonId = $curReason.find('#valueReasonId').first().val();
                    rMPReasonId = $curReason.find('#reasonId').first().val();
                    $curReason.find('.rCommentBox').first().find('span:first').remove();   //Remove the unneeded 'span' tag inside the comments.
                    rMPValueReasonComment = $curReason.find('.rCommentBox').first().html().trim();

                    //If the check Box Status was changed, then the item either needs to be added or deleted
                    if ($curReason.find('.badgebox').first().prop("checked")) {//Item is checked.
                        if (originalSTatus == "checked") {//If the item was originally checked then this is an update (The comment might have been changed)
                            // ~~~~~~~~~ THIS IS AN UPDATE ~~~~~~~~~~~~
                            // Add the current Item to the "UPDATE" list
                            reasonsToUpdate_List = reasonsToUpdate_List + rMPValueReasonId + "," + rMPValueId + "," + rMPReasonId + "," + rMPValueReasonComment + "~";
                        }
                        else {
                            //// ~~~~~~~~~ THIS IS AN ADD ~~~~~~~~~~~~
                            // Add the current Item to the "ADD" list
                            reasonsToAdd_List = reasonsToAdd_List + rMPValueId + "," + rMPReasonId + "," + rMPValueReasonComment + "~";
                        }
                    }
                    else {//Box is not checked.
                        //If it was originally checked, then this is a delete, else skip it (no need to save anything for this reason)
                        if (originalSTatus == "checked") {//If the item was originally checked then this is an update (The comment might have been changed)
                            // ~~~~~~~~~ THIS IS A DELETE ~~~~~~~~~~~~
                            // Add the current Item to the "DELETE" list
                            reasonsToDelete_List = reasonsToDelete_List + rMPValueReasonId + ",";
                        }
                    }
                }
            });

            // --- Loop through all newly assigned reasons (In the 'addedReasons' DIV section) to compile a list of items to insert ------
            $('.newReasonDiv').each(function () {
                //Verify the current reason that was added is checked. If not skip it.
                if ($(this).find('.badgebox').first().prop("checked") == true) {
                    //Retrieve all the fields required by server to add a new Reason for posting
                    //rMPValueReasonText = $(this).find('#newReasonText').first().html();        //Not needed anymore
                    rMPReasonId = $(this).find('#reasonId').first().val();
                    $(this).find('.rCommentBox').first().find('span:first').remove();   //Remove the unneeded 'span' tag inside the comments.
                    rMPValueReasonComment = $(this).find('.rCommentBox').first().html().trim();

                    //// ~~~~~~~~~ THIS IS AN ADD [Add the current Item to the "ADD" list] ~~~~~~~~~~~~
                    reasonsToAdd_List = reasonsToAdd_List + rMPValueId + "," + rMPReasonId + "," + rMPValueReasonComment + "~";
                }
            });

            //Finally, clean the input string from non valid characters and ending separator character
            reasonsToDelete_List = cleanString(reasonsToDelete_List);
            reasonsToUpdate_List = cleanString(reasonsToUpdate_List);
            reasonsToAdd_List = cleanString(reasonsToAdd_List);

            //alert("Posting Data to Server:\nADDING: [" + reasonsToAdd_List + "]\nDELETING: [" + reasonsToDelete_List + "]\nUPDATING: [" + reasonsToUpdate_List + "]" );

            if (reasonsToDelete_List == "" && reasonsToUpdate_List == "" && reasonsToAdd_List == "") {
                //There is Nothing to post
                alert("There are no changes to Save");
            }
            else {
                //Perform Ajax Call to post/save changes: Parameters to Post= string addList, string deleteList, string updateList
                $.ajax({
                    url: '/MPVreasons/modifyMPVReasons',
                    method: "POST",
                    cache: false,
                    //type: "POST",
                    //data: payload,
                    //string mpvr_id, string mtrc_period_val_id, string mpr_id, string mpvr_comment
                    data: { addList: reasonsToAdd_List, deleteList: reasonsToDelete_List, updateList: reasonsToUpdate_List },
                    //contentType: "application/json; charset=utf-8",
                    //dataType: "json",
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert("Failed to Save Data. Ajax Failed!!\nError:" + textStatus + "," + errorThrown);  //<-- Trap and alert of any errors if they occurred
                    }
                }).done(function (d) {
                    //alert("Update Operation completed:\n\n=========== OPERATION RESULTS ===============\n" + d);
                    $("#msgFormBodyData").html("Update Operation completed:<br /><br />=========== OPERATION RESULTS ===============<br />" + d.replaceAll("\n", "<br />"));
                    $('#reloadAfterPopup').val("Y");  //To trigger a relaod when popup is Closed
                    $('#msgForm').modal('show');
                });

            }


            ////Make ajax call to save (Add) Data (New MP Value Assigned Reason)
            //$.ajax({
            //    url: '/MPVreasons/addUpdateMPVReasons',
            //    method: "POST",
            //    cache: false,
            //    //type: "POST",
            //    //data: payload,
            //    //string mpvr_id, string mtrc_period_val_id, string mpr_id, string mpvr_comment
            //    data: { mtrc_period_val_id: rMPValueId, mpr_id: rMPReasonId, mpvr_comment: rMPValueReasonComment },
            //    //contentType: "application/json; charset=utf-8",
            //    //dataType: "json",
            //    error: function (jqXHR, textStatus, errorThrown) {
            //        alert("Failed to Save Data. Ajax Failed!!\nError:" + textStatus + "," + errorThrown);  //<-- Trap and alert of any errors if they occurred
            //    }
            //}).done(function (d) {
            //    alert("Ajax Call result string: " + d);
            //});


            //alert("Progress Saved Successfully");
        });
        //============================ SAVE PROGRESS ACTION FUNCTION ENDS ============================================
        $("#btnCancelMsgForm").click(function () {
            if ($('#reloadAfterPopup').val() == "Y") { window.location.reload(); }
        });

        $('#btnBeginAction').click(function () {
            //alert("New Action Plan Actions are not enabled yet");
            $("#msgFormBodyData").html("New Action Plan Actions are not enabled yet");
            $('#msgForm').modal('show');
        });

        $('#reasonListSection').on('change', '.badgebox', function () {
            var $parentDiv = $(this).parents(".reasonDiv").first();
            var $thisComment = $parentDiv.find(".rCommentBox").first();
            //alert("Parent Div id is:" + $(this).parents(".reasonDiv").first().prop("id"));
            //alert("This Id is: " + $(this).prop("id") + "\nParent Div id is: " + $(this).parents().find(".reasonDiv").first().prop("id"));
            //alert("Parent Id is: " + $(this).parents().find(".reasonDiv").first().prop("id"));
            if ($(this).prop("checked")) {
                // If it gets Checked Add the comment box
                $thisComment.show();

            }
            else { //Hide the comment box
                $thisComment.hide();
            }
            //   alert("Checked is: " + $(this).prop("checked"));

        });

        $(".chkReason").change(function () {
            // When a check box is changed, flag the reason Item as "modified"
            $(this).parents('.reasonDiv').first().find('#wasUpdated').first().val("Y");
            $('#btnSaveProg').prop("disabled", false);
        });

        //$('.reasonComment').change(function () {
        //    // When a Comment box is changed, flag the reason Item as "modified"
        //    alert("Comment chnaged");
        //    $(this).parents('.reasonDiv').first().find('#wasUpdated').first().val("Y");
        //});

        $('#reasonListSection').on('focus', '.rCommentBox', function () {
            $(this).find(".cmLabel").remove();      //Remove the Label since it's not part of the comment
            originalComment = $(this).html().replace("&nbsp;", "").trim();   //Save the Original comment text to determine if it was modified
            $(this).html(originalComment);
        });

        $('#reasonListSection').on('focusout', '.rCommentBox', function () {
            var updatedComment = $(this).html().replace("&nbsp;", "").trim();
            if (updatedComment != originalComment) {
                //The comment text was changed. Update the 'updated' flag
                $(this).parents('.reasonDiv').first().find('#wasUpdated').first().val("Y");
                $('#btnSaveProg').prop("disabled", false);
                //alert("Comment was updated");
            }
            $(this).html(updatedComment);
            $(this).prepend('<span class="cmLabel" style="color:darkgray;" >Comment: </span>');  //Put the Comment label back after leaving the comment field
        });

        //When an Item from the dropdown is selected
        $('#reasonDropdown').on('click', '.ddlReasonItem', function () {
            var newReasonTag = '<div class="newReasonDiv"><div class="row reasonLabel"><label for="dynamic-ABC" class="btn btn-info reasonCkControl" >' +
                '<input type="checkbox" id="dynamic-ABC" class="badgebox" checked><span class="badge">&check;</span>' +
                '<span style="margin-left: 8px" id="newReasonText">' + 'XYZ</span></label>' +
                '<div class="row rComment????"><div class="rCommentBox" contenteditable="true"><span class="cmLabel" style="color:darkgray;" >Comment: </span></div></div></div>' +
                '<input type="hidden" id="reasonId" value="ReasonIdValue" />  </div>';
            var reasonId = $(this).prop("id").replace("li_", "");
            var reasonText = $(this).html();
            var lastDynamicIndex = parseInt($('#newReasonCounter').val()) + 1;

            //alert("Action Selected! Id: " + reasonId + "\nSelection Text: " + reasonText + "\nLast Dynamic element Index is: " + lastDynamicIndex);

            $('.noData').hide();
            //Adds selected Option to the Check List
            dynamicReasonTag = newReasonTag.replace("XYZ", reasonText).replace("ABC", lastDynamicIndex).replace("ABC", lastDynamicIndex).replace("ReasonIdValue", reasonId);
            $('#addedReasons').append(dynamicReasonTag);
            $('#newReasonCounter').val(lastDynamicIndex);     //Update the Hidden Field that holds the last Index used
            $('html, body').animate({ scrollTop: $(document).height() }, "slow");
            //Remove the current List Item from the drop down as items cannot be added twice
            $(this).parents('li').first().remove();
            $('#btnSaveProg').prop("disabled", false);
            $('#addedReasons').find(".rCommentBox").last().focus();
        });

        //$('.ddlReasonItem').click(function () {
        //    var reasonId = $(this).prop("id").replace("li_", "");
        //    var reasonText = $(this).html();
        //    var lastDynamicIndex = parseInt($('#newReasonCounter').val()) + 1;

        //    //alert("Action Selected! Id: " + reasonId + "\nSelection Text: " + reasonText + "\nLast Dynamic element Index is: " + lastDynamicIndex);

        //    $('.noData').hide();
        //    //Adds selected Option to the Check List
        //    dynamicReasonTag = newReasonTag.replace("XYZ", reasonText).replace("ABC", lastDynamicIndex).replace("ABC", lastDynamicIndex).replace("ReasonIdValue", reasonId);
        //    $('#addedReasons').append(dynamicReasonTag);
        //    $('#newReasonCounter').val(lastDynamicIndex);     //Update the Hidden Field that holds the last Index used
        //    $('html, body').animate({ scrollTop: $(document).height() }, "slow");
        //    //Remove the current List Item from the drop down as items cannot be added twice
        //    $(this).parents('li').first().remove();
        //    $('#btnSaveProg').prop("disabled", false);
        //    $('#addedReasons').find(".rCommentBox").last().focus();
        //});

        $('#selNewReason').click(function () {
            //Reset the New Reason text box and show the dialog form
            $('#inputReasonText').val("");
            $('#addReasonForm').modal('show');
        });

        $('#inputReasonText').keydown(function (e) {
            $('#btnAddReasonDetail').prop("disabled", false);
            $(this).removeClass("hasError");
        });

        $('#btnCancelReasons').click(function () {
            var returnUrl = "@ViewBag.ReturnUrl";
            //alert("Returning back to URL: " + returnUrl);
            window.location.href = decodeURIComponent(returnUrl);
        });

        $('#btnAddReasonDetail').click(function () {
            //Create the jason Payload topost to the server
            var reasonText = $('#inputReasonText').val();
            //verify that user did not enter invalid characters
            if ((reasonText.indexOf("<") != -1) || (reasonText.indexOf("/") != -1) || (reasonText.indexOf("'") != -1)) {
                alert("Reason Text has invalid characters.\nPlease correct and try again.");
                return false;
            }
            if (reasonText != "") {
                var mpID = getURL_mpid();
                var reasonText = $('#inputReasonText').val();
                var userId = "@User.Identity.Name";
                var jsonPayload = '{"reasons": [{"mtrc_period_id": "' + mpID + '", "mpr_display_text": "' + reasonText + '", "mpr_desc": "", "mpr_std_yn": "N", "mpr_display_order": "", "user_id": "' + userId + '" }]}';
                //alert(jsonPayload);
                //Make ajax call to save (Add) Data (New MP Reason)
                $.ajax({
                    url: '/ReasonMgmt/addMPReason',
                    //url: 'http://dscapidev/dscmtrc/api/v1/metric/savereason',
                    method: "POST",
                    cache: false,
                    //type: "POST",
                    //data: payload,
                    data: { raw_json: jsonPayload },
                    //contentType: "application/json; charset=utf-8",
                    //dataType: "json",
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert("Failed to Save Data. Ajax Failed!!\nError:" + textStatus + "," + errorThrown);  //<-- Trap and alert of any errors if they occurred
                    }
                }).done(function (d) {
                    if (d != "0") {
                        //alert("Reason Addedd Successfully\nJason result mpr_Id: " + d);
                        $('.noData').hide();        //Hide the "No Data" Message (If it happened to be visible)
                        $('#puSuccessMsg').show().fadeOut(2000, function () { $('#addReasonForm').modal('hide'); });   //Show Success Message and after 2 secods autoclose the popup

                        //Add the newly added Reason to the Drop Down List
                        var newReasonId = d;
                        var insertionIndex = ($('#reasonDropdown li').length) - 3;
                        var reasonListItem = '<li style="padding:0px; "><a class="ddlReasonItem " id="li_' + newReasonId + '" style="padding:0px; margin-left:15px;" href="#">' + reasonText + '</a></li>';

                        $("#reasonDropdown li:eq(" + insertionIndex + ")").after($(reasonListItem));

                        $('#btnSaveProg').prop("disabled", false);    //Reenable the Save progress button
                        //location.reload();
                    } else {
                        alert("Error Saving the data: " + d);
                        //alert("Error Saving the data!\n" + JSON.stringify(d));
                    }
                });
            }
            else {
                $('#inputReasonText').addClass("hasError");
                alert("Reason Text Canot be blank");
            }
        });

        $("#showTable").dblclick(function () {
            $('#listTable').show();
        });

        function getURLid() {
            var sPageURL = window.location.href;
            sPageURL = sPageURL.substring(0, sPageURL.indexOf("?"));         //Remove all the params from the URL
            var indexOfLastSlash = sPageURL.lastIndexOf("/");
            var urlId = sPageURL.substring(indexOfLastSlash + 1);

            return urlId;
            //return sPageURL.match(/\d+\.?\d*/g);
        }

        //function getURLparam(parameterName) {
        //    var sPageURL = window.location.href;
        //    var sPageParameters = window.location.search;

        //    //Check if the parameter exist
        //    if (sPageURL.indexOf(parameterName) == -1) {    //It doesn't exist
        //        return "";
        //    }
        //    else {  //The parameter Exists
        //        var parameterValue = spa

        //    }


        //    var paramValue = sPageURL.


        //        //?month=july
        //    sPageURL = sPageURL.substring(0, sPageURL.indexOf("?"));         //Remove all the params from the URL
        //    var indexOfLastSlash = sPageURL.lastIndexOf("/");
        //    var urlId = sPageURL.substring(indexOfLastSlash + 1);

        //    return urlId;
        //    //return sPageURL.match(/\d+\.?\d*/g);
        //}



        function getURL_mpid() {
            var sPageURL = window.location.href;
            sPageURL = sPageURL.substring(sPageURL.indexOf("mpId="), sPageURL.indexOf("&"));         //Remove all the params from the URL
            return sPageURL.replace("mpId=", "");
            //return sPageURL.match(/\d+\.?\d*/g);
        }

        function cleanString(inputString) {
            //alert("Input String: " + inputString);
            var outputString = inputString;
            //Remove the ending Character Separator
            if (outputString != "") { outputString = outputString.slice(0, -1); }
            //Remove unneeded html tags
            outputString = outputString.replaceAll("<br>", "").replaceAll("<p>", "").replaceAll("</p>", "");
            //alert("Output String: " + outputString);
            return outputString;
        }

        String.prototype.replaceAll = function (search, replacement) {
            var target = this;
            return target.split(search).join(replacement);
        };
    });
</script>